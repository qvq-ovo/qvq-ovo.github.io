<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Acwing树状数组</title>
      <link href="/2023/04/07/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2023/04/07/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>树状数组:<br>两个基本操作:<code>O(lg n)</code><br>1: 修改某个数<br>2: 快速求前缀和</p><p>基本思想: 二进制拆分.(二进制是真的牛)</p><p><a href="https://www.acwing.com/solution/content/13818/">树状数组基本介绍</a></p></div><div class="note success no-icon flat"><p>树状数组3板斧:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原数组(从1开始)</span></span><br><span class="line"><span class="type">int</span> a[N],n;</span><br><span class="line"><span class="comment">// 树状数组</span></span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// lowbit</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k位置上加x</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k;i &lt;= n;i += <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        tr[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前k个数和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k;i;i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div><h2 id="241-楼兰图腾"><a href="#241-楼兰图腾" class="headerlink" title="241. 楼兰图腾"></a>241. 楼兰图腾</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230407/20230407_1.jpg" alt="楼兰图腾"></p><p>树状数组的经典应用题.<br>分析题目很容易得出暴力的<code>n^2</code>是过不了的.<br>简单的来讲,我们需要一个查询前缀和 + 修改某数 都是<code>O(lg n)</code>级别的算法.<br>树状数组不就来了.</p><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原数组</span></span><br><span class="line"><span class="type">int</span> a[N],n;</span><br><span class="line"><span class="comment">// 树状数组</span></span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比x小的个数 比x大的个数</span></span><br><span class="line"><span class="type">int</span> Lower[N],Greater[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// lowbit</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// k位置上加x</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k;i &lt;= n;i += <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        tr[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前k个数和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k;i;i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正向求一遍</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> y = a[i];</span><br><span class="line">        <span class="comment">// 前面比y小的个数</span></span><br><span class="line">        Lower[i] = <span class="built_in">sum</span>(y - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 前面比y大的个数</span></span><br><span class="line">        Greater[i] = <span class="built_in">sum</span>(n) - <span class="built_in">sum</span>(y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        <span class="built_in">add</span>(y,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LL resA = <span class="number">0</span>,resV = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 反向求一遍</span></span><br><span class="line">    <span class="built_in">memset</span>(tr,<span class="number">0</span>,<span class="keyword">sizeof</span> tr);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n;i;i --)&#123;</span><br><span class="line">        <span class="type">int</span> y = a[i];</span><br><span class="line">        </span><br><span class="line">        resA += (LL)Lower[i] * <span class="built_in">sum</span>(y - <span class="number">1</span>);</span><br><span class="line">        resV += (LL)Greater[i] * (<span class="built_in">sum</span>(n) - <span class="built_in">sum</span>(y));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">add</span>(y,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,resV,resA);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1215-小朋友排队"><a href="#1215-小朋友排队" class="headerlink" title="1215. 小朋友排队"></a>1215. 小朋友排队</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230407/20230407_2.jpg" alt="小朋友排队"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing树形DP</title>
      <link href="/2023/04/06/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E6%A0%91%E5%BD%A2DP/"/>
      <url>/2023/04/06/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E6%A0%91%E5%BD%A2DP/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>树形DP,很明显是在树的结构上进行递推的一种动态规划.</p><p>更形象的来讲: 用DP思想和方式优化DFS.</p></div><h2 id="1079-叶子的颜色"><a href="#1079-叶子的颜色" class="headerlink" title="1079. 叶子的颜色"></a>1079. 叶子的颜色</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230406/20230406_4.jpg" alt="叶子的颜色"></p><div class="note info no-icon flat"><p>y氏分析:<br>对于一个一般性的子树: 根节点为p,有S1~Sk个子节点.<br>含义:<br>f(p,无色) : p树中符合条件且p点不涂色的方案集合 中代价最小值.<br>…</p><p>放弃了.</p></div><p>这道题从题目开始就非常的困难.</p><h2 id="285-没有上司的舞会"><a href="#285-没有上司的舞会" class="headerlink" title="285. 没有上司的舞会"></a>285. 没有上司的舞会</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230406/20230406_5.jpg" alt="没有上司的舞会"></p><p>怎么说呢,这道题我更倾向于使用记忆化搜索.<br>树形DP…同一思路吧.</p><div class="note success no-icon flat"><p>思路:<br>1: 如果选择root节点: 下一层的就不能选root节点<br>2: 如果选择root节点: 下一层就随意选择.</p></div><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><p>从上面分析可知,下一层不选root的情况1已经遍历过,2可以直接使用.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6010</span>,M = <span class="number">2</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 记忆化输出</span></span><br><span class="line">    <span class="keyword">if</span>(~dp[u][flag]) <span class="keyword">return</span> dp[u][flag];</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag) ans = w[u];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(flag) ans += <span class="built_in">dfs</span>(j,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> ans += <span class="built_in">max</span>(<span class="built_in">dfs</span>(j,<span class="number">1</span>),<span class="built_in">dfs</span>(j,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记忆</span></span><br><span class="line">    dp[u][flag] = ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        cnt[a] ++;</span><br><span class="line">        <span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cnt[i])&#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选</span></span><br><span class="line">    <span class="built_in">dfs</span>(root,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 不选</span></span><br><span class="line">    <span class="built_in">dfs</span>(root,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(dp[root][<span class="number">0</span>],dp[root][<span class="number">1</span>])&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dp解法"><a href="#dp解法" class="headerlink" title="dp解法"></a>dp解法</h3><p>两种状态转换.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6010</span>,M = <span class="number">2</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 选</span></span><br><span class="line">    dp[u][<span class="number">1</span>] = w[u];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line">        dp[u][<span class="number">1</span>] += dp[j][<span class="number">0</span>];</span><br><span class="line">        dp[u][<span class="number">0</span>] += <span class="built_in">max</span>(dp[j][<span class="number">0</span>],dp[j][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        cnt[a] ++;</span><br><span class="line">        <span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cnt[i])&#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(root);</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(dp[root][<span class="number">0</span>],dp[root][<span class="number">1</span>])&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="323-战略游戏"><a href="#323-战略游戏" class="headerlink" title="323. 战略游戏"></a>323. 战略游戏</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230406/20230406_6.jpg" alt="战略游戏"></p><p>和上一题一样,如果当前root没人,下一个点必须有人.<br>如果当前root有人, 下一个点随意.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1510</span>,M = <span class="number">2</span> * N,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dp[u][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line">        dp[u][<span class="number">0</span>] += dp[j][<span class="number">1</span>];</span><br><span class="line">        dp[u][<span class="number">1</span>] += <span class="built_in">min</span>(dp[j][<span class="number">1</span>],dp[j][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d:(%d)&quot;</span>,&amp;a,&amp;t);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; t;j ++)&#123;</span><br><span class="line">                cin&gt;&gt;b;</span><br><span class="line">                <span class="built_in">add</span>(a,b);</span><br><span class="line">                cnt[b] ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!cnt[i])&#123;</span><br><span class="line">                root = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        cout&lt;&lt;<span class="built_in">min</span>(dp[root][<span class="number">1</span>],dp[root][<span class="number">0</span>])&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树形DP最重要一点: 用子节点值更新根的值.</p><h2 id="1220-生命之树"><a href="#1220-生命之树" class="headerlink" title="1220. 生命之树"></a>1220. 生命之树</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230406/20230406_7.jpg" alt="生命之树"></p><p>树形DP求最大连通和.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,M = <span class="number">2</span> * N,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dp[u] 表示包括u点及其所有子树的最大分数</span></span><br><span class="line">LL dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    dp[u] = w[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j,u);</span><br><span class="line">        dp[u] += <span class="built_in">max</span>(<span class="number">0ll</span>,dp[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a,b),<span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    LL res = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) res = <span class="built_in">max</span>(res,dp[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing区间DP</title>
      <link href="/2023/04/05/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2023/04/05/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>区间DP.指转移方程是在区间上操作的.(说了没说)</p><p>区间DP的遍历方式很独特:<br>一般来讲,区间dp所求的结果为:<code>dp[1][n]</code>.<br>而且转移方程一般是<code>dp[i][j], dp[i + 1][j], dp[i][j - 1], dp[i - 1][j - 1]</code>这几个之间的关系.</p><p>因此,区间DP的遍历方向是 自下而上,自左向右.或者 遍历长度 + 区间起点.</p><p>有两套遍历模板:</p><p>1: <strong>遍历长度 + 区间起点</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历区间长 + 区间起点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">2</span>;len &lt;= n;len ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i + len - <span class="number">1</span> &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> l = i,r = i + len - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2: <strong>自下而上,自左到右</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自下而上,自左而右</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>;i;i --)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i;j &lt;= n;j ++)&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div><h2 id="3996-涂色"><a href="#3996-涂色" class="headerlink" title="3996. 涂色"></a>3996. 涂色</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230406/20230406_1.jpg" alt="涂色"></p><p>区间很明显吧,而且如果模拟的话最坏<code>5000 * 5000 * 5000</code>.时间肯定是不够的.</p><p>y氏分析:<br>含义:<br><code>dp[i][j]</code> 将[i,j]合并到统一颜色的方案集合 的操作最小值.<br>计算:<br>考虑最后一步: c[i], c[j].<br>如果<code>c[i] == c[j]</code>: dp[i + 1][j - 1] + 1<br>如果<code>c[i] != c[j]</code>:<br>有两种选择:<br>1: 先合并<code>c[j]</code>后合并<code>c[i]</code>: dp[i + 1][j] + 1.<br>2: 先合并<code>c[i]</code>后合并<code>c[j]</code>: dp[i][j - 1] + 1.<br>两种选最小值.</p><p>因此:<br><code>dp[i][j] = dp[i + 1][j - 1] + 1, c[i] == c[j]</code>.<br><code>dp[i][j] = min(dp[i + 1][j],dp[i][j - 1]) + 1,c[i] != c[j]</code>.</p><p>考虑边界情况:<br>dp[i][i] = 0;</p><p>注意点:<br>转移方程完全就没有考虑操作起点的选择.<br>或者说,在遍历len=2时,就已经考虑全部点做起点的情况.</p><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;c[i];</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; c[i] == c[i - <span class="number">1</span>]) i --,n --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历长度 + 区间起点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">2</span>;len &lt;= n;len ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i + len - <span class="number">1</span> &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> l = i,r = i + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(c[l] == c[r]) dp[l][r] = dp[l + <span class="number">1</span>][r - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[l][r] = <span class="built_in">min</span>(dp[l + <span class="number">1</span>][r],dp[l][r - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][n]&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="320-能量项链"><a href="#320-能量项链" class="headerlink" title="320. 能量项链"></a>320. 能量项链</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230406/20230406_2.jpg" alt="能量项链"></p><div class="note info no-icon flat"><p>怎么说,矩阵连乘法变形.<br>没想到吧,矩阵乘也是区间DP.</p><p>这里有环,怎么处理起点: <mark>扩展一倍</mark><code>w[i + n] == w[i]</code>.<br>这样就将环展开成长为<code>2n</code>的链了.<br>转化为求<code>dp[i][i + n]</code>.</p><p>y氏分析:<br>含义: <code>dp[i][j]</code>表示合并i到j个矩阵的方案集合 的 价值最大值.<br>计算: 分析最后一步: i ,j<br>i,j之间存在k,<br><code>dp[i][j] = max(dp[i][k] + dp[k][j] + w[i] * w[k] * w[j])</code>.</p><p>注意啊,这中间的<strong>划分线</strong>是两边共用的.(并不是之前那种不共用).</p><p>这个转移方程和矩阵连乘的几乎一摸一样.</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">        w[i + n] = w[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">3</span>;len &lt;= n + <span class="number">1</span>;len ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i + len - <span class="number">1</span> &lt;= <span class="number">2</span> * n;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> l = i,r = i + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = l + <span class="number">1</span>;k &lt; r;k ++)&#123;</span><br><span class="line">                dp[l][r] = <span class="built_in">max</span>(dp[l][r],dp[l][k] + dp[k][r] + w[l] * w[k] * w[r]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res,dp[i][i + n]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意哦,这道题的区间长度比较特殊哦,因为是两两矩阵相乘,所以是从3开始.<br>因为要处理掉环所以是<code>[i,i + n]</code>,长度最大为<code>n + 1</code>.</p><h2 id="479-加分二叉树"><a href="#479-加分二叉树" class="headerlink" title="479. 加分二叉树"></a>479. 加分二叉树</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230406/20230406_3.jpg" alt="加分二叉树"></p><h3 id="dp解法"><a href="#dp解法" class="headerlink" title="dp解法"></a>dp解法</h3><div class="note info no-icon flat"><p>都写道这了,DP的套路基本掌握部分.</p><p>y氏分析:<br>含义:<br><code>dp[i][j]</code>: 将从i到j节点拼接成树的方案集合 中价值最大的那种.<br>计算:<br>考虑最后一步: i ,j<br>i,j之间存在k.<br>dp[i][j] = max(dp[i][k - 1] * dp[k + 1][j] + w[k]).</p><p>考虑边界:</p><p>由题意可知:空子树的价值为1,而叶节点的价值为w[i].<br>因此:<br>dp[i][i] = w[i].(每个点作为叶子节点的价值)</p><p>k可以取到i,j.<br>当k == i 左子树价值为1.<br>当k == j 右子树价值为1.</p></div><div class="note success no-icon flat"><p>上面那块将最终价值算出来了.<br>这道题还有一问: 输出最大方案的前序遍历.</p><p>真是头大.记忆化啊,头痛.</p><p>很显然,在计算<code>dp[i][j]</code>时取到的最大值的子集为k.<br>那么k为<code>[i,j]</code>这序列变成二叉树的根节点.<br>我们用个数组记录所有区间的根节点.最后用dfs前序遍历一遍即可.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> k = g[l][r];</span><br><span class="line">    cout&lt;&lt;k&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(l,k - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(k + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;w[i];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>;len &lt;= n;len ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i + len - <span class="number">1</span> &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> l = i,r = i + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = l;k &lt;= r;k ++)&#123;</span><br><span class="line">                <span class="comment">// 边界情况</span></span><br><span class="line">                <span class="type">int</span> left = k == l ? <span class="number">1</span> : dp[l][k - <span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> right = k == r ? <span class="number">1</span> : dp[k + <span class="number">1</span>][r];</span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> score = left * right + w[k];</span><br><span class="line">                <span class="comment">// 特判叶子 </span></span><br><span class="line">                <span class="keyword">if</span>(l == r) score = w[k];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(score &gt; dp[l][r])&#123;</span><br><span class="line">                    dp[l][r] = score;</span><br><span class="line">                    g[l][r] = k;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][n]&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如区间dp也可以自下而上自左而右遍历一样.<br>这道题肯定是可以用搜索的思路解,不过因为有太多重复子问题.所以是记忆化搜索.</p><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><p>思路相差不大,不过这种更多像是将暴力dfs优化.<br>大佬思路: <a href="https://www.acwing.com/solution/content/60558/">加分二叉树【记忆化搜索思想】</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> k = g[l][r];</span><br><span class="line">    cout&lt;&lt;k&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(l,k - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(k + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记忆化搜索</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(~f[l][r]) <span class="keyword">return</span> f[l][r];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = l;k &lt;= r;k ++)&#123;</span><br><span class="line">        <span class="type">int</span> left = l == k ? <span class="number">1</span> : <span class="built_in">find</span>(l,k - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> right = r == k ? <span class="number">1</span> : <span class="built_in">find</span>(k + <span class="number">1</span>,r);</span><br><span class="line">        <span class="type">int</span> score = left * right + w[k];</span><br><span class="line">        <span class="keyword">if</span>(l == r) score = w[k];</span><br><span class="line">        <span class="keyword">if</span>(f[l][r] &lt; score)&#123;</span><br><span class="line">            g[l][r] = k;</span><br><span class="line">            f[l][r] = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> f[l][r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">find</span>(<span class="number">1</span>,n)&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>区间DP就暂时到这里了,学完这些应该算的上入门了吧.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing线性DP</title>
      <link href="/2023/04/04/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E7%BA%BF%E6%80%A7DP/"/>
      <url>/2023/04/04/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>线性DP.指状态之间有线性关系的动态规划问题.</p><p>常见线性dp:<br>1: 数字三角形<br>2: 最长上升子序列<br>3: 最长公共子序列</p></div><h2 id="1051-最大的和"><a href="#1051-最大的和" class="headerlink" title="1051. 最大的和"></a>1051. 最大的和</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230405/20230405_1.jpg" alt="最大的和"></p><p>读完题,这道题就是最大连续字段和Pro版.</p><div class="note success no-icon flat"><p>最大连续字段和:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> res = -INF,ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans,<span class="number">0</span>) + g[i];</span><br><span class="line">    res = <span class="built_in">max</span>(res,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这道题从dp开始,优化到贪心了.</p></div><p>说回这道题,很明显,我们可以以<code>i</code>为界分别求<code>[1,i - 1]</code>,<code>[i,n]</code>两个区域连续字段最大值.由于连续字段有可逆性,所以<code>[i,n]</code>逆向求.</p><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>,INF = <span class="number">0x3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 正向求</span></span><br><span class="line">        <span class="type">int</span> res = -INF,ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,<span class="number">0</span>) + w[i];</span><br><span class="line">            res = <span class="built_in">max</span>(res,ans);</span><br><span class="line">            g[i] = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 逆向求 + 结果</span></span><br><span class="line">        <span class="type">int</span> S = -INF;</span><br><span class="line">        res = -INF,ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>;i;i --)&#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,<span class="number">0</span>) + w[i];</span><br><span class="line">            res = <span class="built_in">max</span>(res,ans);</span><br><span class="line">            S = <span class="built_in">max</span>(S,res + g[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,S);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="272-最长公共上升子序列"><a href="#272-最长公共上升子序列" class="headerlink" title="272. 最长公共上升子序列"></a>272. 最长公共上升子序列</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230405/20230405_2.jpg" alt="最长公共上升子序列"></p><p>两个经典线性dp的合体版.</p><div class="note info no-icon flat"><p>y氏分析:<br>含义:<br><code>dp[i][j]</code>: 考虑A[1..i] 和B[1…j],且以B[j]结尾的公共上升子序列集合中 子序列长度最大值.</p><p>计算:<br>分析最后一步: A[i]. (B[j]已经在dp数组内了)<br>两种情况:<br><code>A[i]不在公共上升子序列中</code>: dp[i - 1][j].<br><code>A[i] == B[j]</code>:<br>再次划分:<br>根据划分原则:找最后一步.<br>在这里即<code>B[j]</code>前一个<code>B[k]</code>结尾的公共上升子序列<code>dp[i - 1][k]</code>.<br><code>k &gt; 0,k &lt; j</code>.<br><code>B[j]</code>肯定是接在最大的后面.</p><p>因此:<br><code>dp[i][j] == dp[i - 1][j], A[i] != B[j]</code>.<br><code>dp[i][j] == max(dp[i - 1][k] + 1) A[i] == B[j],k &lt; j,B[k] &lt; B[j]</code>.</p><p>分析边界情况:<br>k完全没找到时: <code>dp[i][j] = 1</code>.<br>由于<code>dp[i][0] = 0</code>,所以k可以从0出发.</p><p>别人的思路:<a href="https://www.acwing.com/solution/content/52304/">AcWing 272. 最长公共上升子序列【LCIS + 优化】</a></p></div><h3 id="朴素写法O-n-3"><a href="#朴素写法O-n-3" class="headerlink" title="朴素写法O(n^3)"></a>朴素写法<code>O(n^3)</code></h3><p>由上面分析可以写出第一版朴素的dp(什么时候dp都算是朴素写法了)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) cin&gt;&gt;b[j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[j])&#123;</span><br><span class="line">                <span class="comment">// 向前找b[j]能接上的最大值</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; j;k ++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(b[j] &gt; b[k])</span><br><span class="line">                        dp[i][j] = <span class="built_in">max</span>(dp[i][j],dp[i - <span class="number">1</span>][k] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结果是最后一行最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) res = <span class="built_in">max</span>(res,dp[n][i]);</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化-O-n-2"><a href="#优化-O-n-2" class="headerlink" title="优化 O(n^2)"></a>优化 <code>O(n^2)</code></h3><p>优化也是被逼的.如果数据范围只有100,朴素写法一定是可以过的.</p><div class="note success no-icon flat"><p>重新观察第三层循环.<br>第三层循环是找<code>B[k] &lt; B[j]</code>且<code>dp[i - 1][k] + 1最大值</code>.<br>这里<code>B[j] == A[i]</code>.<br>转化成找<code>B[k] &lt; A[i]</code>,且<code>dp[i - 1][k] + 1最大值</code>.</p><p>这个只需要在遍历j层时开个变量<code>t</code>记录下即可.<br>考虑到边界情况: <code>t = 1</code>(初始值).</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) cin&gt;&gt;b[j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="comment">// 找dp[i - 1][k]的最大值</span></span><br><span class="line">        <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[j])&#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i][j],t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找最大值</span></span><br><span class="line">            <span class="keyword">if</span>(b[j] &lt; a[i]) t = <span class="built_in">max</span>(t,dp[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结果是最后一行最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) res = <span class="built_in">max</span>(res,dp[n][i]);</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说,这样的优化是真的牛!</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing背包DP</title>
      <link href="/2023/04/03/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E8%83%8C%E5%8C%85DP/"/>
      <url>/2023/04/03/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek6/Acwing%E8%83%8C%E5%8C%85DP/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>背包DP,最经典的一个动规问题.<br>最有代表性的就是: 01背包, 完全背包,多重背包.</p><p>其中最经典的就是01背包,其他的都可以看成01背包的扩展.<br>y总当年的成名战就是背包九讲.</p></div><div class="note success no-icon flat"><p><strong>01背包模板</strong>:<br>空间未优化:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j ++)&#123;</span><br><span class="line">        <span class="comment">// 不选 + 选不了(边界)</span></span><br><span class="line">        dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(j &gt;= v[i]) dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j],dp[i - <span class="number">1</span>][j - v[i]] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>空间优化:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">    <span class="comment">// 逆向,保证j - v[i] 用i - 1 层的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m;j &gt;= v[i];j --)&#123;</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j],dp[j - v[i]] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>完全背包</strong>:<br>学习这个优化思路: <code>dp[i][j - v[i]]</code>.</p><p>空间优化:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">    <span class="comment">// 正向, j - v[i] 用的是 i层的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = v[i];j &lt;= m;j ++)&#123;</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j],dp[j - v[i]] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>多重背包</strong>:</p><p>优化思路1: <mark>二进制优化</mark><br>思想: 对于<code>1~n</code>,最少可以使用<code>lg(n)上取整</code>个数表示.分别为<code>2^0, 2^1,...,2^k,n - 2^k</code>.(最后一个有点难想到)</p><p>该思路使用二进制将多重背包转化成背包数尽可能少的01背包.</p><p>转化代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v first ; w second</span></span><br><span class="line">vector&lt;PII&gt; goods;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">    <span class="type">int</span> v,w,s;</span><br><span class="line">    cin&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">    <span class="comment">// 二进制划分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= s;k &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        s -= k;</span><br><span class="line">        goods.<span class="built_in">push_back</span>(&#123;v * k,w * k&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s &gt; <span class="number">0</span>) goods.<span class="built_in">push_back</span>(&#123;v * s,w * s&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该优化可以解决<code>10^3</code>量级问题.</p><p>优化思路2: <mark>单调队列</mark>优化</p></div><h2 id="3382-整数拆分"><a href="#3382-整数拆分" class="headerlink" title="3382. 整数拆分"></a>3382. 整数拆分</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230403/20230403_4.jpg" alt="整数拆分"></p><p><u>如果不是放在背包问题这,我是想不到用背包dp的.</u></p><div class="note info no-icon flat"><p>思路:</p><p>我们先处理出一个<code>v[i]</code> 表示<code>2^(i - 1)</code>的数组.<br>从1开始,方便dp模板.</p><p>y氏分析:<br>含义:<br><code>dp[i][j]</code> : 使用前i个数,表示j的集合 的总数<br>计算:<br>考虑最后一步: 对i来说.<br>0 不选:  <code>dp[i - 1][j]</code><br>1 选1个: <code>dp[i - 1][j - v[i]]</code><br>…<br>k 选k个: <code>dp[i - 1][j - k * v[i]]</code><br>所以:<br><code>dp[i][j] = dp[i - 1][j] + dp[i - 1][j - v] +...+dp[i - 1][j - k*v[i]]</code>.</p><p>这和完全背包dp非常类似.因此可以借鉴完全背包的优化思路:</p><p>考虑<code>dp[i][j - v[i]]</code>:<br><code>dp[i][j - v[i]] = dp[i - 1][j - v[i]] + dp[i - 1][j - 2*v[i]] +...+dp[i - 1][j - k*v[i]]</code>.<br>刚好和<code>dp[i][j]</code>相差<code>dp[i - 1][j]</code>.</p><p>因此: <code>dp[i]][j] = dp[i - 1][j] + dp[i][j - v[i]]</code>.</p><p>空间优化方式和完全背包一样.</p><p>最终得到转移方程: <code>dp[j] = dp[j] + dp[j - v[i]]</code>.</p><p>处理边界情况:<br>1: <code>dp[1][j] = 1</code>.<br>2: <code>j - v[i] == 0</code>时,也算一种,所以<code>dp[1][0] = 1</code><br>处理掉一维后:<br>相当于<code>dp[j] = 1, (j &gt;= 0 &amp;&amp; j &lt;= m)</code>.</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,P = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// v数组</span></span><br><span class="line">    <span class="type">int</span> v = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= m;j ++)&#123;</span><br><span class="line">        dp[j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">20</span>;i ++)&#123;</span><br><span class="line">        v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(v &gt; m) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = v;j &lt;= m;j ++)&#123;</span><br><span class="line">            dp[j] = (dp[j] + dp[j - v]) % P;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1214-波动数列"><a href="#1214-波动数列" class="headerlink" title="1214. 波动数列"></a>1214. 波动数列</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230404/20230404_1.jpg" alt="波动数列"></p><p>还是太菜了,根本想不到任何办法.</p><div class="note info no-icon flat"><p>y总思路:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230404/20230404_2.jpg" alt="波动数列分析图"></p><p>观察这个式子: 每个<code>d</code>有两种选择,结果为<code>s%n</code>.这不妥妥的01背包吗.</p><p>含义:<br><code>dp[i][j]</code>: 考虑前i项,结果为j的集合的 种类数</p><p>计算:<br>第<code>i</code>项为: <code>(n - i) * a = x</code>,或者<code>(n - i) * (-b) = y</code>.</p><p><code>dp[i][j] = dp[i - 1][(j - x) % n] + dp[i - 1][(j + y) % n]</code>.</p><p>考虑边界情况:<br><code>dp[0][0] = 1</code></p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>,P = <span class="number">100000007</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求a % b正余数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_mod</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a % p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,s,a,b;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">get_mod</span>(s,n);</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">            dp[i][j] = (dp[i - <span class="number">1</span>][<span class="built_in">get_mod</span>(j - (n - i) * a,n)] + dp[i - <span class="number">1</span>][<span class="built_in">get_mod</span>(j + (n - i) * b,n)]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n - <span class="number">1</span>][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题是真的牛.</p><h2 id="1226-包子凑数"><a href="#1226-包子凑数" class="headerlink" title="1226. 包子凑数"></a>1226. 包子凑数</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230404/20230404_3.jpg" alt="包子凑数"></p><p>怎么说呢,即使是不会写也要想办法写个暴力.<br>特别是像这早期的蓝桥杯,数据范围小.</p><div class="note info no-icon flat"><p>这道题还是有点数论的知识:<br><a href="https://baike.baidu.com/item/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/5186593?fr=aladdin">裴蜀定理</a>.</p><p>简单讲一下和本题相关的点:<br>对于<code>a</code>,<code>b</code>俩数,<code>d = gcd(a,b)</code>.则<code>a</code>与<code>b</code>的组合必定是<code>d</code>的倍数.<br>因此:<br>如果<code>d != 1</code>,必定有无穷个表示不出来的数.<br>如果<code>d == 1</code>,不能表示出来的数必定有限,最大不能表示的数为<code>(a - 1)*(b - 1) - 1</code>.</p><p>然后这道题就成了完全背包问题.<br><code>dp[i] = dp[i - v[1]] | dp[i - v[2]] | ...</code>.</p><p>边界: <code>dp[0] = true</code></p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        t = <span class="built_in">gcd</span>(a[i],t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t &gt; <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;INF&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(a,a + n);</span><br><span class="line">        st[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 最大不能表示的数也在N内</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; a[<span class="number">0</span>]) st[i] = <span class="literal">false</span>,res ++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i &gt;= a[j])&#123;</span><br><span class="line">                        st[i] = st[i] | st[i - a[j]];</span><br><span class="line">                        <span class="keyword">if</span>(st[i]) <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!st[i]) res ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>背包只是基础,更多的从题目能抽象出背包的模型出来.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing博弈论</title>
      <link href="/2023/04/03/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
      <url>/2023/04/03/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>博弈论,这里就讲一点点博弈论的基础知识.</p><p>这里两个状态都是指<mark>先手</mark><br><code>必败态P</code>: 直观认为该状态一定会输.<br><code>必胜态N</code>: 直观认为该状态一定会赢.</p><p>准确来说:<br>1: N有方法走到P.<br>2: P无法移动到N.</p><p>简单的博弈游戏: <mark>巴什博弈</mark><br>描述: 对于<code>n</code>个石子,两个人轮流拿,可以拿<code>1~k</code>个石子,最终拿完的人获胜.<br><strong>结论</strong>: 若<code>n % (k + 1) != 0</code> 先手必胜,否则后手必胜. </p></div><h2 id="4005-取石子游戏"><a href="#4005-取石子游戏" class="headerlink" title="4005. 取石子游戏"></a>4005. 取石子游戏</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230403/20230403_3.jpg" alt="取石子游戏"></p><p>放弃了.直接放代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">3</span>) <span class="built_in">puts</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r = n % (k + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (r == k || r % <span class="number">3</span>) <span class="built_in">puts</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>另外一个非常有用的函数<code>SG函数</code>.<br><a href="https://www.cnblogs.com/zwfymqz/p/8469840.html">博弈论进阶之SG函数</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing组合计数</title>
      <link href="/2023/04/02/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
      <url>/2023/04/02/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>组合数学,一个令人头大的东西.<br>组合数学最重要的就是做到<mark>不重不漏</mark>.</p><p>同时组合数学中就经常使用快速幂.</p></div><h2 id="4496-吃水果"><a href="#4496-吃水果" class="headerlink" title="4496. 吃水果"></a>4496. 吃水果</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230402/20230402_3.jpg" alt="吃水果"></p><p>一共有两种方法: <code>组合数</code>,<code>dp</code>.</p><h3 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h3><p>数学分析:<br>从n - 1个人中选k人出来:<code>C(n - 1,k)</code>.<br>m中情况保持k中相邻不同:<code>m * (m - 1)^(k -  1)</code>.<br>其他人保持相同选择:<code>(m - 1)</code>.</p><p>总方案数: <code>C(n - 1,k) * m * (m - 1)^k</code>.</p><div class="note info no-icon flat"><p><code>C(a,b) = C(a-1,b) + C(a-1,b - 1)</code>,<code>10^3</code>左右可以用<br>求模一定要注意有乘必模,有加减必模.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">998244353</span>,N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line">LL c[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">quick_pow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = a * (LL)a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="comment">// 求c(n - 1,k)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= i &amp;&amp; j &lt;= k;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!j) c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i - <span class="number">1</span>][j - <span class="number">1</span>] + c[i - <span class="number">1</span>][j]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求res</span></span><br><span class="line">    LL res = c[n - <span class="number">1</span>][k] * m % P * <span class="built_in">quick_pow</span>(m - <span class="number">1</span>,k,P) % P;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><p>dp思想也比较简单想到.<br><code>dp[i][j]</code>: 考虑前i个人刚好有j个人水果不同的方案总数.<br>考虑最后一步:<br>1: <code>c[i] == c[i - 1]</code>: <code>dp[i - 1][j]</code><br>2: <code>c[i] != c[i - 1]</code>: <code>dp[i - 1][j - 1] * (m - 1)</code><br>因此: <code>dp[i][j] = dp[i - 1][j] + d[i - 1][j - 1] * (m - 1)</code>.<br>考虑边界情况: <code>dp[i][0] = m</code> </p><p>本题全部代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>,P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL dp[N][N];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) dp[i][<span class="number">0</span>] = m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= k;j ++)&#123;</span><br><span class="line">            dp[i][j] = (dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>] * (m - <span class="number">1</span>) % P) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n][k]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1307-牡牛和牝牛"><a href="#1307-牡牛和牝牛" class="headerlink" title="1307. 牡牛和牝牛"></a>1307. 牡牛和牝牛</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230403/20230403_1.jpg" alt="牡牛和牝牛"></p><p>我感觉啊,所有的组合问题都可以用dp解.</p><h3 id="dp解"><a href="#dp解" class="headerlink" title="dp解"></a>dp解</h3><p>分析:<br><code>dp[i]</code>: 前i头牛符合条件的排列方法数.<br>考虑第<code>i</code>头牛:<br>是a: 方案数 = <code>dp[i - 1]</code><br>是b: 方案数 = <code>dp[i - k - 1]</code><br>因此: <code>dp[i] = dp[i - 1] + dp[i - k - 1]</code>.<br>边界情况:<br>(i从1开始)<br>当<code>i &lt;= k + 1</code>时: <code>dp[i] = i + 1</code>.(b牛最多1头)</p><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,P = <span class="number">5000011</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="comment">// 初始条件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">1</span>;i ++) dp[i] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k + <span class="number">2</span>;i &lt;= n;i ++) dp[i] = (dp[i - <span class="number">1</span>] + dp[i - k <span class="number">-1</span>]) % P;</span><br><span class="line">    cout&lt;&lt;dp[n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="递推写法"><a href="#递推写法" class="headerlink" title="递推写法"></a>递推写法</h3><p><code>f[i]</code>: 前i个牛,且第i个为b的所有方案数<br><code>f[0]</code>: 没有b,为1.</p><p>则<code>f[i] = f[0] + f[1] + ... + f[i - k - 1]</code> = <code>s[i - k - 1]</code>.</p><p>答案: <code>f[0] + f[1] + ... + f[n]</code> = <code>s[n]</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,P = <span class="number">5000011</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL f[N],s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    f[<span class="number">0</span>] = s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        f[i] = s[<span class="built_in">max</span>(i - k - <span class="number">1</span>,<span class="number">0</span>)];</span><br><span class="line">        s[i] = (s[i - <span class="number">1</span>] + f[i]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s[n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么说呢,可以看成两种不同的dp思路.</p><h2 id="1310-数三角形"><a href="#1310-数三角形" class="headerlink" title="1310. 数三角形"></a>1310. 数三角形</h2><p>题目非常的简洁.</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230403/20230403_2.jpg" alt="数三角形"></p><p>但题目一点都不简单.</p><div class="note success no-icon flat"><p>首先:正面去数所有合法的三角形个数必交困难.<br>这时我们就可以使用容斥原理,从反方向考虑.</p><p>对于<code>n * m</code>个点集(n列的点数,m行的点数)</p><p>总情况: 任意选择3个点: <code>c(n * m,3)</code>.<br>不满足情况:<br>1: k = 0 <code>m * c(n,3)</code><br>2: k = 无穷 <code>n * c(m,3)</code>.<br>3: k &gt; 0 ,k &lt; 0: 这两种情况的方案数是相同的,(这里假设k &gt; 0)</p><p>枚举每个点<code>(i,j)</code>:则另外一个点<code>(x,y)</code>可取方案数为<code>(n - i) * (m - j)</code>.<br>然后求<code>(i,j)</code>与<code>(x,y)</code>之间的整点个数 <mark>gcd(i,j) - 1</mark>.<br>这个<code>gcd(i,j) - 1</code>的证明可以看这位大佬的<a href="https://www.acwing.com/solution/content/22893/">题解gcd(i,j)−1的证明</a></p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求c(n,3)</span></span><br><span class="line"><span class="function">LL <span class="title">c</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (LL)n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    n ++,m ++;</span><br><span class="line">    LL res = <span class="built_in">c</span>(n * m) - (LL)m * <span class="built_in">c</span>(n) - (LL)n * <span class="built_in">c</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j ++)</span><br><span class="line">            res -= <span class="number">2ll</span> * (<span class="built_in">gcd</span>(i,j) - <span class="number">1</span>) * (n - i) * (m - j);</span><br><span class="line">            </span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing快速幂</title>
      <link href="/2023/04/01/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2023/04/01/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>快速幂,一个 在<code>O(lg n)</code>时间内求 <code>a^b % p</code>的方法.</p><p>快速幂使用二进制思想加速求幂的过程.</p><p><mark>快速幂模板</mark>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">quick_pow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    LL res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="comment">// 末尾为1</span></span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        <span class="comment">// a =&gt; a^2</span></span><br><span class="line">        a = a * (LL)a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>看起来很简单吧,转化进制真的有奇效.<br>用的时候注意数据范围.</p></div><h2 id="876-快速幂求逆元"><a href="#876-快速幂求逆元" class="headerlink" title="876. 快速幂求逆元"></a>876. 快速幂求逆元</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230402/20230402_1.jpg" alt="快速幂求逆元"></p><p>快速幂的经典应用.<br>这道题如果用朴素写法,最坏情况<code>10^5 * 10^9</code>必定超时.<br>如果使用快速幂<code>10^5 * lg(10^9)</code>大概在<code>10^6</code>左右.</p><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">quick_pow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = a * (LL)a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a,p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;p);</span><br><span class="line">        <span class="keyword">if</span>(a % p == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            LL res = <span class="built_in">quick_pow</span>(a,p - <span class="number">2</span>,p);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="1290-越狱"><a href="#1290-越狱" class="headerlink" title="1290. 越狱"></a>1290. 越狱</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230402/20230402_2.jpg" alt="越狱"></p><p>我感觉更像是组合数学.</p><p><u>555,千防万防,没想到还是栽在取模上</u>.</p><p>思路:<br>一共有<code>n</code>间房,每间房有<code>m</code>种情况.所有状态种数有<code>m^n</code>.<br>考虑不越狱的情况种数: <code>m * (m - 1) *...(m -1)</code>,共<code>m * (m - 1)^(n-1)</code>.<br>所以会发生越狱的状态数为:<code>m^n - m * (m-1)^(n-1)</code>.</p><p>题目考虑取模,有以下几个点:<br><mark>乘法: 两个相乘后要取模</mark><br><mark>加减法: 两个相加减后要取模</mark><br>除法一般不取模.<br>(这里我就死在相减后未取模.)</p><p>取模:<br><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相加/相乘: (a + b) % p,  a * b %p</span><br><span class="line">相减: (a % p - b %p + p) % p // 保证为正数</span><br></pre></td></tr></table></figure></p><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">100003</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">quick_pow</span><span class="params">(<span class="type">int</span> a,LL k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = a * (LL)a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n,m;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    LL res = (<span class="built_in">quick_pow</span>(m,n,P) - (LL)m * <span class="built_in">quick_pow</span>(m<span class="number">-1</span>,n<span class="number">-1</span>,P) % P + P) % P;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>快速幂相关的就到这里了,主要是记住快速幂的模板公式.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_gcd相关</title>
      <link href="/2023/04/01/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing-gcd%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/04/01/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing-gcd%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>最大公约数gcd,代码简单,思想深刻.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常的简单,不要忘了哦.</p></div><h2 id="4309-消灭老鼠"><a href="#4309-消灭老鼠" class="headerlink" title="4309. 消灭老鼠"></a>4309. 消灭老鼠</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230401/20230401_3.jpg" alt="消灭老鼠"></p><p>经典gcd应用题,还带着点小坑.</p><p>全部代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gcd</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    set&lt;PII&gt; S;</span><br><span class="line">    <span class="type">int</span> n,x,y;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> t = x - a,d = y - b;</span><br><span class="line">        <span class="comment">// 统一方向 &#123;-1,1&#125;和&#123;1,-1&#125; 为同一方向</span></span><br><span class="line">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            t = -t;</span><br><span class="line">            d = -d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> g = <span class="built_in">gcd</span>(t,d);</span><br><span class="line">        S.<span class="built_in">insert</span>(&#123;t / g, d / g&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)S.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note info no-icon flat"><p>因为是间接存储<code>斜率k</code>,所以会出现同一方向两种表达:<code>{-1,1},{1,-1}</code>.<br>写的时候必须把这两种情况统一起来.即规定方向.</p></div><h2 id="200-Hankson的趣味题"><a href="#200-Hankson的趣味题" class="headerlink" title="200. Hankson的趣味题"></a>200. Hankson的趣味题</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230401/20230401_4.jpg" alt="Hankson的趣味题"></p><p>这道题还是很有东西的.<br><div class="note success no-icon flat"><p>首先你得先会暴力解:<br>暴力枚举出<code>d</code>的所有约数. <code>sqrt(10^9) * 2000</code><br>然后判断哪几个约数满足条件. <code>16u00 * lg n * 2000</code></p><p>然后会发现: 最卡时间的是求<code>d</code>的所有约数.</p><p>这里y总提示: 我们可以先求d的所有质因数,然后通过质因数拼凑出所有约数.</p><p>为啥这样做会更快呢: 因为用到的质数个数很少<code>n / ln n</code>,而且组成的约数个数也比较少(1600以下).</p></div></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// d的所有质因数对</span></span><br><span class="line">PII factor[<span class="number">1601</span>];</span><br><span class="line"><span class="type">int</span> fcnt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d的所有约数</span></span><br><span class="line"><span class="type">int</span> dyue[<span class="number">1601</span>],dcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[cnt ++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;prime[j] &lt;= n / i;j ++)&#123;</span><br><span class="line">            st[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小公倍数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 防爆int</span></span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a,b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑到第u位,当前乘积为p</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == fcnt)&#123;</span><br><span class="line">        dyue[dcnt ++] = p;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= factor[u].y;i ++)&#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="built_in">dfs</span>(u + <span class="number">1</span>,p);</span><br><span class="line">        p *= factor[u].x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_prime</span>(N - <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> t = d;</span><br><span class="line">        fcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;prime[i] &lt;= t / prime[i];i ++)&#123;</span><br><span class="line">            <span class="type">int</span> p = prime[i];</span><br><span class="line">            <span class="keyword">if</span>(t % p == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(t % p == <span class="number">0</span>) t /= p,s ++;</span><br><span class="line">                factor[fcnt ++] = &#123;p,s&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; <span class="number">1</span>) factor[fcnt ++] = &#123;t,<span class="number">1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 爆搜出d的所有约数 </span></span><br><span class="line">        dcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; dcnt;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> x = dyue[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">gcd</span>(a,x) == b &amp;&amp; <span class="built_in">lcm</span>(c,x) == d)&#123;</span><br><span class="line">                res ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>像这样不同方法来回切换的能力,真的NB.<br>这道题这样做主要是取巧,能够通过不同方式求约数.</p><p>约数这部分就学到这里,仙术就先不学了.老老实实用简单的模板吧.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing筛质数</title>
      <link href="/2023/04/01/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E7%AD%9B%E8%B4%A8%E6%95%B0/"/>
      <url>/2023/04/01/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek5/Acwing%E7%AD%9B%E8%B4%A8%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>筛质数,一共有三种方法.<br>我的建议是至少记住埃氏筛.(简单高效)</p><p>不管是哪种筛,首先要明白<u>试除法求质数的过程</u>.</p></div><div class="note success no-icon flat"><p><strong>埃氏筛</strong>:<br>遍历到素数时筛除其所有合数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            prime[cnt ++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + i;j &lt;= n;j += i)&#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>10^7</code> 0.18s左右<br><code>10^8</code> 2.3s左右<br>1s左右大概运行<code>4 * 10^7</code>.</p><p><strong>线性筛</strong>:<br>只使用最小质因数筛除所有合数,做到每个数之判断一次<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[cnt ++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;prime[j] &lt;= n / i;j ++)&#123;</span><br><span class="line">            st[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 不再是最小质因数</span></span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>10^7</code> 0.13s左右<br><code>10^8</code> 1.3s左右<br>1s左右大概运行<code>6 * 10^7</code>.</p><p>线性筛代码逻辑性很强,理清逻辑后记忆就会简单很多.</p><p>通过时间上的对比,在<code>10^6</code>左右,两者没太大差别,<code>10^7</code>后推荐用线性筛.</p></div><h2 id="3792-质数问题"><a href="#3792-质数问题" class="headerlink" title="3792. 质数问题"></a>3792. 质数问题</h2><p>非常简单的模板题.</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230401/20230401_1.jpg" alt="质数问题"></p><p>我写的:<br>先求1000以内所有质数,二分找比n小的质数位置,遍历求满足要求的个数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            prime[cnt ++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + i;j &lt;= n;j += i)&#123;</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_prime</span>(<span class="number">1003</span>);</span><br><span class="line">    <span class="type">int</span> t,n,k;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(prime[mid] &lt;= n) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; l;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> j = prime[i] + prime[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j &lt;= n &amp;&amp; !st[j]) ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans &gt;= k) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>y总:<br>直接遍历2~n,判断满足条件的个数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[cnt ++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;prime[j] &lt;= n / i;j ++)&#123;</span><br><span class="line">            st[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 不再是最小质因数</span></span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_prime</span>(<span class="number">1003</span>);</span><br><span class="line">    <span class="type">int</span> t,n,k;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt; cnt;j ++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(prime[j - <span class="number">1</span>] + prime[j] + <span class="number">1</span> == i)&#123;</span><br><span class="line">                        ans ++;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans &gt;= k) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题更多的是介绍两种素数筛.</p><h2 id="196-质数距离"><a href="#196-质数距离" class="headerlink" title="196. 质数距离"></a>196. 质数距离</h2><p>这道题才更像是考数论相关的知识.</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230401/20230401_2.jpg" alt="质数距离"></p><div class="note info no-icon flat"><p>由上面的时间可以看出,即使是线性筛,也不能超过<code>10^8</code>.<br>所以这道题肯定不能只用线性筛.必须挖掘一些相关性质出来.</p><p><strong>性质</strong>: <code>n</code>为合数,必然存在一个质因子<code>x</code>满足<code>x &lt;= sqrt(n)</code>.(简单证明)</p><p>有了这个性质后,我们只需要求<code>sqrt(2^31 - 1)</code>大概<code>50000</code>左右的质数.<br>然后使用这些质数筛除掉<code>[l,r]</code>中的合数,将剩下的质数保存下来.<br>最后遍历求结果.</p><p><strong>性质2</strong>: <code>a/b 上取整 == (a + b - 1) / b 下取整</code>.(c++ <code>/</code>都是下取整).</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[cnt ++] = i;</span><br><span class="line">        <span class="comment">// 值用最小质因数筛除合数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;prime[j] &lt;= n / i;j ++)&#123;</span><br><span class="line">            st[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 最小质因数用完</span></span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;l&gt;&gt;r)&#123;</span><br><span class="line">        <span class="built_in">get_prime</span>(N - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 用质数筛除掉[l,r]之间的合数</span></span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; cnt;i ++)&#123;</span><br><span class="line">            LL p = prime[i];</span><br><span class="line">            <span class="comment">// [l,r]包含p的情况,不能把p自己筛掉</span></span><br><span class="line">            <span class="keyword">for</span>(LL j = <span class="built_in">max</span>((l + p - <span class="number">1</span>) / p * p,<span class="number">2</span> * p);j &lt;= r;j += p)&#123;</span><br><span class="line">                st[j - l] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录剩下的素数</span></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= r - l;i ++)&#123;</span><br><span class="line">            <span class="comment">// 1要特判</span></span><br><span class="line">            <span class="keyword">if</span>(!st[i] &amp;&amp; i + l &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                prime[cnt ++] = i + l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt &lt; <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;There are no adjacent primes.&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> minp = <span class="number">0</span>,maxp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; cnt - <span class="number">1</span>;i ++)&#123;</span><br><span class="line">                <span class="type">int</span> t = prime[i + <span class="number">1</span>] - prime[i];</span><br><span class="line">                <span class="keyword">if</span>(t &lt; prime[minp + <span class="number">1</span>] - prime[minp]) minp = i;</span><br><span class="line">                <span class="keyword">if</span>(t &gt; prime[maxp + <span class="number">1</span>] - prime[maxp]) maxp = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d,%d are closest, %d,%d are most distant.\n&quot;</span>,prime[minp],prime[minp + <span class="number">1</span>],prime[maxp],prime[maxp + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这道题很有研究价值.</p><p>质数相关的就先到这里吧.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_二分图相关</title>
      <link href="/2023/03/31/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/03/31/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>二分图啊,y总直接化身恋爱导师.</p><p>二分图最常考的就是最大匹配,而y总这部分讲的最生动.hhh</p></div><div class="note success no-icon flat"><p>二分图之<strong>单点匹配</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点t能否匹配</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历该点所有匹配点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="comment">// j点未被标记</span></span><br><span class="line">        <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">            <span class="comment">// 标记j点</span></span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// j点未匹配 || j点的匹配对象可匹配其他人</span></span><br><span class="line">            <span class="keyword">if</span>(!match[j] || <span class="built_in">find</span>(match[j]))&#123;</span><br><span class="line">                <span class="comment">// j 与 t 匹配</span></span><br><span class="line">                match[j] = t;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>是不是非常的生动.<br>值得注意的一点,这只是单人匹配.<br>求最大匹配必须完整遍历完一边所有点,同时记得<span class='p red'>每次清空st数组</span>.</p></div><h2 id="1394-完美牛棚"><a href="#1394-完美牛棚" class="headerlink" title="1394. 完美牛棚"></a>1394. 完美牛棚</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230331/20230331_4.jpg" alt="完美牛棚"></p><p>可谓是模板题,一点都没变.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>,M = <span class="number">40010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> match[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[j] || <span class="built_in">find</span>(match[j]))&#123;</span><br><span class="line">                match[j] = t;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> s,x;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">while</span>(s --)&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="built_in">add</span>(i,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(i))&#123;</span><br><span class="line">            res ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但这并不意味着二分图就很简单.</p><h2 id="257-关押罪犯"><a href="#257-关押罪犯" class="headerlink" title="257. 关押罪犯"></a>257. 关押罪犯</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230331/20230331_5.jpg" alt="关押罪犯"></p><p>二分,又是二分,二分算法果然NB.可惜我又没有看出来.(这道题非常的老了)<br>看完题解后,还是只能说nb.</p><div class="note info no-icon flat"><p>思路:<br>答案一定是在<code>[0,1e9]</code>之间的,现在设答案为x.<br>则图中所有大于x的边构造的图一定是二分图.<br>因此我们可以使用二分求出x.</p><p>(思路出来后代码是行云流水的)</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20010</span>,M = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> color[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs判断是否是二分图</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> c,<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(w[i] &lt;= mid) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!color[j])&#123;</span><br><span class="line">            flag = <span class="built_in">dfs</span>(j,<span class="number">3</span> - c,mid);</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(color[j] == c)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化染色数组</span></span><br><span class="line">    <span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span> color);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!color[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(i,<span class="number">1</span>,mid)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>,r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">        r = <span class="built_in">max</span>(r,c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二分判断</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>真的,不得不感叹人和人的差距,有时候比人和狗的都大.</p><h2 id="372-棋盘覆盖"><a href="#372-棋盘覆盖" class="headerlink" title="372. 棋盘覆盖"></a>372. 棋盘覆盖</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230331/20230331_6.jpg" alt="棋盘覆盖"></p><div class="note info no-icon flat"><p>这要是放之前,我肯定是DFS暴力做了.</p><p>这里有一个非常新奇的角度,可以将棋盘拆分成二分图:<br>(i + j) 为 奇数 设为白格子<br>(i + j) 为 偶数 设为黑格子<br>一块骨牌 == 一个白格子与最近的黑格子匹配.<br>太Nice了.</p><p>在这种思路下,本题就转化成带限制条件的二分图最大匹配.(基本就是模板题)</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">// 标记不可用</span></span><br><span class="line"><span class="type">bool</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">PII match[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</span><br><span class="line">        <span class="comment">// 四方向上的黑格子</span></span><br><span class="line">        <span class="type">int</span> a = x + dir[i][<span class="number">0</span>],b = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 在棋盘中且未被标记</span></span><br><span class="line">        <span class="keyword">if</span>(a &amp;&amp; a &lt;= n &amp;&amp; b &amp;&amp; b &lt;= n &amp;&amp; !g[a][b] &amp;&amp; !st[a][b])&#123;</span><br><span class="line">            st[a][b] = <span class="literal">true</span>;</span><br><span class="line">            PII t = match[a][b];</span><br><span class="line">            <span class="keyword">if</span>(t.first == <span class="number">0</span> || <span class="built_in">find</span>(t.first,t.second))&#123;</span><br><span class="line">                match[a][b] = &#123;x,y&#125;;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        g[a][b] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">            <span class="comment">// 考虑白格子</span></span><br><span class="line">            <span class="keyword">if</span>((i + j) % <span class="number">2</span> &amp;&amp; !g[i][j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">find</span>(i,j))&#123;</span><br><span class="line">                    res ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>二分图就到这里了,图论也就到这里了.(图论真精彩)</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_最近公共祖先</title>
      <link href="/2023/03/31/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/2023/03/31/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>基础课没出现的知识.<br>最近公共祖先(LCA)算法,一个非常经典的算法.(在提高课中学习)</p></div><div class="note success no-icon flat"><p>LCA最常用的方法: <strong>倍增法</strong></p><p><strong>倍增思路</strong>: <code>O(n * lg n)</code><br><code>depth[i]</code>表示<code>i</code>的深度<br>1: 定义<code>f[i,j]</code> 表示从<code>i</code>开始向上走<code>2^j</code>步能到达的位置.<code>f(i,j)</code>: <code>f(i,j) = f(f(i,j-1),j-1)</code>(j &gt; 0).<br>先预处理出<code>f(i,j)</code>和<code>depth[i]</code>.<br>注意: 这里可能会跳过根节点,那么就返回<code>f(i,j) = 0</code>同时<code>depth[i] = 0</code>.简单说是设置了一个哨兵<code>depth[0] = 0</code>.</p><p>2: 先让两个点跳到同一层(使用二进制拼凑方法).<br>3: 两个点同时跳到最近公共祖先的下一层.<br>4:  答案为f(x,0)或f(y,0).(是同一个值)</p><p><span class='p red'>这里的思路可能会有点乱</span></p><p>模板代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="comment">// 各点的深度</span></span><br><span class="line"><span class="type">int</span> depth[N];</span><br><span class="line"><span class="comment">// 倍增递推数组 16由题目范围决定</span></span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理倍增递推数组 + 记录每个点的depth</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f3f</span>,<span class="keyword">sizeof</span> depth);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="comment">// 设置哨兵</span></span><br><span class="line">    depth[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 根</span></span><br><span class="line">    depth[root] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="comment">// 未更新过</span></span><br><span class="line">            <span class="keyword">if</span>(depth[j] &gt; depth[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                depth[j] = depth[t] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">                <span class="comment">// 处理倍增递推数组</span></span><br><span class="line">                <span class="comment">// 跳2^0步</span></span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt; <span class="number">16</span>;k ++)</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// LCA主要逻辑</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 保持a更近</span></span><br><span class="line">    <span class="keyword">if</span>(depth[a] &gt; depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="comment">// b向上跳</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="comment">// 二进制拼凑法</span></span><br><span class="line">        <span class="keyword">if</span>(depth[fa[b][k]] &gt;= depth[a])</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 到同一层了</span></span><br><span class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="comment">// 同时向上跳,直到最紧公共祖先的下一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][k] != fa[b][k])&#123;</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>关于代码解析<a href="https://www.acwing.com/solution/content/20554/">祖孙询问(树上倍增LCA) </a>这篇是写的最好的.</p></div><h2 id="3555-二叉树"><a href="#3555-二叉树" class="headerlink" title="3555. 二叉树"></a>3555. 二叉树</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230331/20230331_1.jpg" alt="二叉树"></p><p>一道很裸的题,有很多种解法: <a href="https://www.acwing.com/solution/content/127051/">AcWing 3555. 二叉树 | 倍增 | tarjan</a></p><p>不过在这里我们就写一个朴素的LCA解法.</p><div class="note info no-icon flat"><p>思路:<br>1: 预处理每个点到根节点的距离<br>2: 将询问的a,b向上走,直到走到同一个节点.<br>(设a是较深的节点,先a向上走到和b同层,判断后同时向上走)</p><p>这道题由于树是二叉树,所以我们可以用非常简单的方式建树,求点到根的距离.</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="comment">// 二叉树结构(简单有效)</span></span><br><span class="line"><span class="type">int</span> l[N],r[N],p[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与根节点距离</span></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// u节点与根节点距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> ds)</span></span>&#123;</span><br><span class="line">    d[u] = ds;</span><br><span class="line">    <span class="keyword">if</span>(l[u] != <span class="number">-1</span>) <span class="built_in">dfs</span>(l[u],ds + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(r[u] != <span class="number">-1</span>) <span class="built_in">dfs</span>(r[u],ds + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 保持a比b更近</span></span><br><span class="line">    <span class="keyword">if</span>(d[a] &gt; d[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="comment">// b先爬到和a同一高度</span></span><br><span class="line">    <span class="keyword">while</span>(d[b] &gt; d[a]) b = p[b];</span><br><span class="line">    <span class="comment">// 同时向上爬直到爬到同一个点</span></span><br><span class="line">    <span class="keyword">while</span>(a != b) a = p[a],b = p[b];</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(l,<span class="number">-1</span>,<span class="keyword">sizeof</span> l);</span><br><span class="line">        <span class="built_in">memset</span>(r,<span class="number">-1</span>,<span class="keyword">sizeof</span> r);</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> a,b;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            l[i] = a;</span><br><span class="line">            r[i] = b;</span><br><span class="line">            <span class="keyword">if</span>(a != <span class="number">-1</span>) p[a] = i;</span><br><span class="line">            <span class="keyword">if</span>(b != <span class="number">-1</span>) p[b] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">            <span class="type">int</span> a,b;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="type">int</span> c = <span class="built_in">get_lca</span>(a,b);</span><br><span class="line">            cout&lt;&lt;d[a] + d[b] - <span class="number">2</span> * d[c]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="1172-祖孙询问"><a href="#1172-祖孙询问" class="headerlink" title="1172. 祖孙询问"></a>1172. 祖孙询问</h2><p><strong>LCA模板题</strong>.这道题的思路和上题是一样的,只是树的结构更复杂一点.<br>同时,数据范围决定了上面那种写法<code>最坏O(m* n)</code>是过不了的.</p><p>这道题也是最上面<strong>倍增思路</strong>的例子.复杂度<code>预处理O(n *lg n) + 查询O(m * lg n)</code>.</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230331/20230331_2.jpg" alt="祖孙询问"></p><p>这道题的思路前面已经写的很清楚了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40010</span>,M = <span class="number">2</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各点的深度</span></span><br><span class="line"><span class="type">int</span> depth[N];</span><br><span class="line"><span class="comment">// 倍增递推数组</span></span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理倍增递推数组 + 记录每个点的depth</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f3f</span>,<span class="keyword">sizeof</span> depth);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="comment">// 设置哨兵</span></span><br><span class="line">    depth[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 根</span></span><br><span class="line">    depth[root] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="comment">// 未更新过</span></span><br><span class="line">            <span class="keyword">if</span>(depth[j] &gt; depth[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                depth[j] = depth[t] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">                <span class="comment">// 处理倍增递推数组</span></span><br><span class="line">                <span class="comment">// 跳2^0步</span></span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt; <span class="number">16</span>;k ++)</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 保持a更近</span></span><br><span class="line">    <span class="keyword">if</span>(depth[a] &gt; depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="comment">// b向上跳</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="comment">// 二进制拼凑法</span></span><br><span class="line">        <span class="keyword">if</span>(depth[fa[b][k]] &gt;= depth[a])</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 到同一层了</span></span><br><span class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="comment">// 同时向上跳,直到最紧公共祖先的下一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][k] != fa[b][k])&#123;</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">-1</span>) root = a;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">add</span>(a,b);</span><br><span class="line">            <span class="built_in">add</span>(b,a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(root);</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">get_lca</span>(a,b);</span><br><span class="line">        <span class="keyword">if</span>(c == a) cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == b) cout&lt;&lt;<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1171-距离"><a href="#1171-距离" class="headerlink" title="1171. 距离"></a>1171. 距离</h2><p>这题一看就是<code>floyd</code>,再看数据范围<code>10^4</code>…刚好卡死<code>朴素floyd</code>.<br>说明要对<code>floyd</code>进行优化,结合现在学的最近公共祖先.</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230331/20230331_3.jpg" alt="距离"></p><p>试过之后,555,失败了,一个都没过,没想到啊.<br>看完题解思路,直呼tarjanNB.<br>但看完评论,卧槽,我只需要略微修改,就可任意直接使用倍增法求最短路.</p><h3 id="倍增法解最短路"><a href="#倍增法解最短路" class="headerlink" title="倍增法解最短路"></a>倍增法解最短路</h3><p>指定一个点为root节点,在更新<code>depth</code>同时更新其他点到root点的距离.<br>然后任意两点的距离就是和第一题一样了.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>,M = <span class="number">2</span> * N,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LCA相关</span></span><br><span class="line"><span class="type">int</span> depth[N];</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最短路距离</span></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth,INF,<span class="keyword">sizeof</span> depth);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="comment">// 哨兵</span></span><br><span class="line">    depth[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    depth[root] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="comment">// 未更新的更新</span></span><br><span class="line">            <span class="keyword">if</span>(depth[j] &gt; depth[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                depth[j] = depth[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 同时更新各点到root最短路</span></span><br><span class="line">                d[j] = d[t] + w[i];</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">                <span class="comment">// 处理倍增</span></span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt; <span class="number">16</span>;k ++)&#123;</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 保持a更近</span></span><br><span class="line">    <span class="keyword">if</span>(depth[a] &gt; depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="comment">// b向上跳</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[fa[b][k]] &gt;= depth[a])</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 同一层</span></span><br><span class="line">    <span class="keyword">if</span>(b == a) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="comment">// 同时向上跳到LCA下一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][k] != fa[b][k])&#123;</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// LCA预处理</span></span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">get_lca</span>(a,b);</span><br><span class="line">        cout&lt;&lt;d[a] + d[b] - <span class="number">2</span> * d[c]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="Tarjan离线LCA"><a href="#Tarjan离线LCA" class="headerlink" title="Tarjan离线LCA"></a>Tarjan离线LCA</h3><p>这种算法,y总评论区说: Tarjan离线LCA不如倍增LCA,在这道题上倍增LCA也就多16个常数.<br>不过Tarjan离线LCA是真的秀,同时复杂度只有O(n + m).<br>这道题估计是数据量不够,所以不能体现出Tarjan离线LCA的强大之处.(也体现不出Tarjan的NB)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20010</span>,M = <span class="number">2</span> * N,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="comment">// 距离</span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="comment">// tarjan的奇妙标记数组</span></span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"><span class="comment">// first 另一个点 second id</span></span><br><span class="line">vector&lt;PII&gt; query[N];</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="type">int</span> res[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs求各点到root的距离</span></span><br><span class="line"><span class="comment">// t 当前点,fa 父节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> t,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 双向存会多存一个父节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="comment">// 去除父节点</span></span><br><span class="line">        <span class="keyword">if</span>(j == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dist[j] = dist[t] + w[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j,t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 标记为1情况,遍历但未回溯</span></span><br><span class="line">    st[u] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="comment">// j标记为0的情况: 未遍历</span></span><br><span class="line">        <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">            <span class="comment">// 向左下角搜索</span></span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            <span class="comment">// 合并到公共根节点</span></span><br><span class="line">            p[j] = u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理查询</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; item : query[u])&#123;</span><br><span class="line">        <span class="type">int</span> y = item.first,id = item.second;</span><br><span class="line">        <span class="comment">// 情况2: 遍历且回溯过</span></span><br><span class="line">        <span class="keyword">if</span>(st[y] == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">// 直接找公共祖先</span></span><br><span class="line">            <span class="type">int</span> anc = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="comment">// 求最短路</span></span><br><span class="line">            res[id] = dist[u] + dist[y] - <span class="number">2</span> * dist[anc];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 点u已经回溯完</span></span><br><span class="line">    st[u] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i &lt; n - <span class="number">1</span>;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(a != b)&#123;</span><br><span class="line">            query[a].<span class="built_in">push_back</span>(&#123;b,i&#125;);</span><br><span class="line">            query[b].<span class="built_in">push_back</span>(&#123;a,i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) p[i] = i;</span><br><span class="line">    <span class="comment">// 这里指定1为root节点</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">tarjan</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i ++)&#123;</span><br><span class="line">        cout&lt;&lt;res[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>怎么说,就现阶段而言,就先掌握<strong>倍增LCA</strong>吧.<br>最后再贴一遍:<br>倍增LCA:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40010</span>,M = <span class="number">2</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> depth[N];</span><br><span class="line"><span class="comment">// 16由题目数据范围计算</span></span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LCA初始化,求depth和fa递推式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth,<span class="number">0x3f3f</span>,<span class="keyword">sizeof</span> depth);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="comment">// 哨兵</span></span><br><span class="line">    depth[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 根节点</span></span><br><span class="line">    depth[root] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(depth[j] &gt; depth[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                depth[j] = depth[t] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">                <span class="comment">// 倍增</span></span><br><span class="line">                fa[j][<span class="number">0</span>] = t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt; <span class="number">16</span>;k ++)&#123;</span><br><span class="line">                    fa[j][k] = fa[fa[j][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 保持a更近</span></span><br><span class="line">    <span class="keyword">if</span>(depth[a] &gt; depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="comment">// b向上跳</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="comment">// 二进制拼凑</span></span><br><span class="line">        <span class="keyword">if</span>(depth[fa[b][k]] &gt;= depth[a])&#123;</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a,b同一层</span></span><br><span class="line">    <span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="comment">// a,b同时向上跳,直到LCA下一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">15</span>;~k;k --)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][k] != fa[b][k])&#123;</span><br><span class="line">            a = fa[a][k];</span><br><span class="line">            b = fa[b][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_最小生成树</title>
      <link href="/2023/03/29/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2023/03/29/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>最小生成树…<br>怎么说呢,和前面的最短路非常的相似.可以说是从另一个角度考察图.</p><p>最小生成树一共有两种算法: <code>prim</code>和<code>Kruskal</code>算法.<br><code>prim</code>算法<code>O(n^2 + m)</code> 用于稠密图<br><code>kruskal</code>算法<code>O(m * lg m)</code>用于稀疏图</p><p>PS: y总说: <code>prim</code>算法我们更倾向于使用朴素版,因为堆优化版不如<code>kruskal</code>.</p><p>对于<code>prim</code>算法,可以和<code>Dijkstra</code>算法一起记忆.(都是从点的角度出发)<br><code>kruskal</code>算法,单独记忆(到目前为止唯一一个使用并查集的算法)(从边角度出发)</p></div><div class="note success no-icon flat"><p><strong>朴素版prim</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点,边</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="comment">// 边权</span></span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="comment">// 点间距离</span></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="comment">// 标记用过的点</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="comment">// 最小生成树长度</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// i = 0 首点入队特判</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t== <span class="number">-1</span> || d[j] &lt; d[t]))</span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 有不连通的边,一定构造不成生成树</span></span><br><span class="line">        <span class="keyword">if</span>(i &amp;&amp; d[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line">        <span class="keyword">if</span>(i) res += d[t];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="comment">// 更新,和dijkstra最大的不同</span></span><br><span class="line">            d[j] = <span class="built_in">min</span>(d[j],w[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>(可以看成<code>dijkstra</code>的孪生姐妹)</p><p><strong>Kriskal算法</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点集</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edge&amp; c) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; c.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Edges[N];</span><br><span class="line"><span class="comment">// 并查集</span></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="comment">// 点,边</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集find操作</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kriskrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 并查集初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) p[i] = i;</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">sort</span>(Edges,Edges + k);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 加入的边数</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a = Edges[i].a,b = Edges[i].b,w = Edges[i].w;</span><br><span class="line">        a = <span class="built_in">find</span>(a),b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(a != b)&#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 未连通情况</span></span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>是真的简单,就是没记住</p></div><h2 id="3728-城市通电"><a href="#3728-城市通电" class="headerlink" title="3728. 城市通电"></a>3728. 城市通电</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230330/20230330_1.jpg" alt="城市通电"></p><p>被标签骗了,最多是中等题.<br>这道题的思想和前面一样,建立”超级源点”.<br>不过,这道题还有一点可以学习的:<mark>获取最小生成树的各条边</mark></p><h3 id="朴素prim算法"><a href="#朴素prim算法" class="headerlink" title="朴素prim算法"></a>朴素prim算法</h3><p>前面算法模板知道: prim需要特判首节点,而我们这里首点为0且会提前处理0节点情况.<br>所以主算法过程不必特判了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">PII g[N];</span><br><span class="line"><span class="type">int</span> wk[N],wc[N];</span><br><span class="line">LL d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录建立电站的点</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="comment">// 记录建立边的点</span></span><br><span class="line">vector&lt;PII&gt; v;</span><br><span class="line"><span class="comment">// 记录建立边的两端点关系</span></span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_dist</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    LL x = <span class="built_in">abs</span>(g[a].first - g[b].first);</span><br><span class="line">    LL y = <span class="built_in">abs</span>(g[a].second - g[b].second);</span><br><span class="line">    <span class="keyword">return</span> (x + y) * (wk[a] + wk[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 不需要</span></span><br><span class="line">    <span class="comment">// memset(d,INF,sizeof d);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 代价</span></span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理首节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) d[i] = wc[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 首节点不用</span></span><br><span class="line">    st[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || d[j] &lt; d[t]))</span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不需要特判无解情况(必定有解)</span></span><br><span class="line">        res += d[t];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录边或点 </span></span><br><span class="line">        <span class="keyword">if</span>(!fa[t]) p.<span class="built_in">push_back</span>(t);</span><br><span class="line">        <span class="keyword">else</span> v.<span class="built_in">push_back</span>(&#123;fa[t],t&#125;);</span><br><span class="line">        </span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; <span class="built_in">get_dist</span>(t,j))&#123;</span><br><span class="line">                d[j] = <span class="built_in">get_dist</span>(t,j);</span><br><span class="line">                fa[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;g[i].first&gt;&gt;g[i].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;wc[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;wk[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// prim得到最小代价</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">prim</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">// 建电站</span></span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)p.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : p) cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">// 建电线</span></span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(v.<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [pa,a] : v) cout&lt;&lt;pa&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="kruskal解法"><a href="#kruskal解法" class="headerlink" title="kruskal解法"></a>kruskal解法</h3><p>很明显这道题是不适合Kruskal算法的,权当练手.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">PII g[N];</span><br><span class="line"><span class="type">int</span> wk[N];</span><br><span class="line"><span class="type">bool</span> st[N * N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; fa;</span><br><span class="line">vector&lt;PII&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    LL w;</span><br><span class="line">    <span class="type">bool</span> <span class="type">const</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge&amp; t)&#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; t.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[N * N];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_dist</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    LL x = <span class="built_in">abs</span>(g[a].first - g[b].first);</span><br><span class="line">    LL y = <span class="built_in">abs</span>(g[a].second - g[b].second);</span><br><span class="line">    <span class="keyword">return</span> (x + y) * (wk[a] + wk[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 点个数</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(edges,edges + k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) p[i] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a,b = edges[i].b,w = edges[i].w;</span><br><span class="line">        a = <span class="built_in">find</span>(a),b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(a != b)&#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            p[b] = a;</span><br><span class="line">            cnt ++;</span><br><span class="line">            res += w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;g[i].first&gt;&gt;g[i].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        edges[k ++] = &#123;<span class="number">0</span>,i,x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;wk[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                edges[k ++] = &#123;i,j,<span class="built_in">get_dist</span>(i,j)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="built_in">kruskal</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">// 处理边和点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!edges[i].a) fa.<span class="built_in">push_back</span>(edges[i].b);</span><br><span class="line">            <span class="keyword">else</span> v.<span class="built_in">push_back</span>(&#123;edges[i].a,edges[i].b&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)fa.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : fa) cout&lt;&lt;c&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(v.<span class="built_in">size</span>() != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [a,b] : v)&#123;</span><br><span class="line">            cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另一种写法:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">PII g[N];</span><br><span class="line"><span class="type">int</span> wk[N];</span><br><span class="line"><span class="type">bool</span> st[N * N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ea;</span><br><span class="line">vector&lt;PII&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    LL w;</span><br><span class="line">    <span class="type">bool</span> <span class="type">const</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge&amp; t)&#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; t.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[N * N];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_dist</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    LL x = <span class="built_in">abs</span>(g[a].first - g[b].first);</span><br><span class="line">    LL y = <span class="built_in">abs</span>(g[a].second - g[b].second);</span><br><span class="line">    <span class="keyword">return</span> (x + y) * (wk[a] + wk[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 点个数</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(edges,edges + k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) p[i] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a,b = edges[i].b,w = edges[i].w;</span><br><span class="line">        <span class="type">int</span> fa = <span class="built_in">find</span>(a),fb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(fa != fb)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a == <span class="number">0</span>) ea.<span class="built_in">push_back</span>(b);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a != <span class="number">0</span> &amp;&amp; b != <span class="number">0</span>) v.<span class="built_in">push_back</span>(&#123;a,b&#125;); </span><br><span class="line">            p[fb] = fa;</span><br><span class="line">            cnt ++;</span><br><span class="line">            res += w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;g[i].first&gt;&gt;g[i].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        edges[k ++] = &#123;<span class="number">0</span>,i,x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;wk[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                edges[k ++] = &#123;i,j,<span class="built_in">get_dist</span>(i,j)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="built_in">kruskal</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">// 处理边和点</span></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)ea.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : ea) cout&lt;&lt;c&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>)v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(v.<span class="built_in">size</span>() != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [a,b] : v)&#123;</span><br><span class="line">            cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><div class="note success no-icon flat"><p>实话说,最小生成树的代码还是挺简单的(前提是不要和最短路代码弄乱了)</p><p>这道题还是很有参考价值,多看看,以免未来要输出最小生成树路径时没有思路.</p></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_朴素Folyd</title>
      <link href="/2023/03/29/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E6%9C%B4%E7%B4%A0Folyd/"/>
      <url>/2023/03/29/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-%E6%9C%B4%E7%B4%A0Folyd/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>Folyd: 解决多源最短路问题.<br>但通过学习前面的”超级源点”的知识, 我感觉某些多源问题也是可以转化成单源问题.<br>怎么说呢, 图论就是这么奇妙.</p><p>Floyd朴素版需要<code>O(n^3)</code>,同时Floyd是由动态规划推导来的.<br>大致推导:<br><code>f[k][i][j]</code>: 表示从<code>i</code>到<code>j</code>只经过<code>1~k</code>的所有路径的最小值<br>因此, <code>f[k][i][j] = min(f[k - 1][i][j],f[k - 1][i][k] + f[k - 1][k][j])</code><br>在更新<code>k</code>层时,必须先更新<code>k - 1</code>层.<br>然后可以优化掉一层空间:<br><code>f[i][j] = min(f[i][j],f[i][k] + f[k][j])</code></p><p>不过感觉在这里考的有点简单.</p></div><h2 id="4074-铁路与公路"><a href="#4074-铁路与公路" class="headerlink" title="4074. 铁路与公路"></a>4074. 铁路与公路</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230329/20230329_1.jpg" alt="铁路与公路"></p><p>这道题完全可以不用<code>folyd</code>.而且不用<code>folyd</code>速度会更快.但代码两更多.</p><h3 id="floyd解法"><a href="#floyd解法" class="headerlink" title="floyd解法"></a>floyd解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">410</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// floyd三层循环</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;k ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j],d[i][k] + d[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="comment">// floyd的特别初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != j) d[i][j] = INF;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        d[a][b] = d[b][a] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 铁路能到,处理成公路的图</span></span><br><span class="line">    <span class="keyword">if</span>(d[<span class="number">1</span>][n] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d[i][j] != <span class="number">1</span>) d[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(d[i][j] == <span class="number">1</span>) d[i][j] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 铁路不能到,公路肯定是第一时间到.</span></span><br><span class="line">    <span class="built_in">floyd</span>();</span><br><span class="line">    <span class="keyword">if</span>(d[<span class="number">1</span>][n] == INF) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;d[<span class="number">1</span>][n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dijkstra解法-朴素"><a href="#dijkstra解法-朴素" class="headerlink" title="dijkstra解法(朴素)"></a>dijkstra解法(朴素)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">410</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || d[j] &lt; d[t]))&#123;</span><br><span class="line">                t = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            d[j] = <span class="built_in">min</span>(d[j],d[t] + w[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        w[a][b] = w[b][a] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(w[<span class="number">1</span>][n] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) w[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(w[i][j] == <span class="number">1</span>) w[i][j] = INF;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(w[i][j] != <span class="number">1</span>) w[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; w[i][j] != <span class="number">1</span>)&#123;</span><br><span class="line">                    w[i][j] = INF;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">if</span>(d[n] == INF) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;d[n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spfa解法"><a href="#spfa解法" class="headerlink" title="spfa解法"></a>spfa解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">410</span>,M = <span class="number">200010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">bool</span> w[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                d[j] = d[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        w[a][b] = w[b][a] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(w[<span class="number">1</span>][n])&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; !w[i][j])&#123;</span><br><span class="line">                    <span class="built_in">add</span>(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; w[i][j])&#123;</span><br><span class="line">                    <span class="built_in">add</span>(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(d[n] == INF) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;d[n]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>怎么说呢,<code>Dijkstra</code>甚至比<code>SPFA</code>的速度更快一点.<br>但不管怎么说,这两种算法都比<code>folyd</code>的速度快.</p><h2 id="1125-牛的旅行"><a href="#1125-牛的旅行" class="headerlink" title="1125. 牛的旅行"></a>1125. 牛的旅行</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230329/20230329_2.jpg" alt="牛的旅行"></p><p>怎么说呢,开始感觉还是挺简单的,再仔细看的时候就感觉不对劲了.<br>这道题考察了<code>floyd</code>的推导过程.</p><div class="note info no-icon flat"><p>y总分析.(首先要通读题目,弄清楚情况)</p><p>1: 使用<code>floyd</code>算法求出任意两点之间的最短距离<br>(这里肯定是用floyd,像之前的商店的超级源点思想是用不了的)</p><p>2: 求maxd[i],表示和i连通的且距离i最远的点与i之间的距离</p><p>3: 分情况<br>情况1: 未连边情况下最大直径: maxd[i]的最大值<br>情况2: 枚举每对不连通的两个点,求连接它们后的直径,遍历得最小值<br>比较两种情况得最大值,即为答案.</p><p>关于这部分的疑问.评论区解答的很清楚了.</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230329/20230329_3.jpg" alt="分情况的疑问"></p><p>怎么说呢,也算是题目给的坑吧.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">160</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> INF = <span class="number">1e20</span>; <span class="comment">//double的极大值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">PDD w[N];</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> d[N][N];</span><br><span class="line"><span class="type">double</span> maxd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">get_dist</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> x = w[a].first - w[b].first;</span><br><span class="line">    <span class="type">double</span> y = w[a].second - w[b].second;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x * x + y * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cin&gt;&gt;w[i].first&gt;&gt;w[i].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cin&gt;&gt;g[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                d[i][j] = <span class="built_in">get_dist</span>(i,j);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                d[i][j] = INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// floyd</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; n;k ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j],d[i][k] + d[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> res1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 情况1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i][j] != INF)&#123;</span><br><span class="line">                maxd[i] = <span class="built_in">max</span>(maxd[i],d[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res1 = <span class="built_in">max</span>(res1,maxd[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> res2 = INF;</span><br><span class="line">    <span class="comment">// 情况2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i][j] == INF)&#123;</span><br><span class="line">                res2 = <span class="built_in">min</span>(res2,maxd[i] + maxd[j] + <span class="built_in">get_dist</span>(i,j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>,<span class="built_in">max</span>(res1,res2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这就是图论吧,思路清晰后,代码写起来就很简单.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_SPFA相关</title>
      <link href="/2023/03/27/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-SPFA%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/03/27/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek4/Acwing-SPFA%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>SPFA是从bellman_fold基础上优化来的.<br>但好笑的是,SPFA代码形式上更加贴近堆优化版dijkstra.<br>这一点是因为SPFA使用和堆优化版dijkstra类似(甚至一样)的数据结构.</p><p>我认为最大的区分:<br>代码上:<br><strong>SPFA中st数组是有加有减的(标记在队列中)</strong>.<br><strong>Dijkstra中st数组是只能添加(标记用过的)</strong>.<br>思想上:<br>dijkstra是从点的角度出发,每次<mark>选择加入新的点</mark>.<br>SPFA继承bellman_fold的边的思想,主打边的<mark>松弛操作</mark>.<br>(所以SPFA中点会反复进队列)</p><p>最后提一句:<br>我们一直建议对于正权图或上星期的<a href="https://www.acwing.com/problem/content/344/">道路与航线</a>这样特殊的图.能用Dijkstra的就用Dijkstra.<br>至于SPFA,只要数据用心构造,很容易卡最坏情况<code>O(n * m)</code>.</p></div><div class="note success no-icon flat"><p>SPFA的代码模板:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    </span><br><span class="line">    d[start] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    st[start] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 出队取消</span></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[t] + w[i])&#123;</span><br><span class="line">                d[j] = d[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    <span class="comment">// 入队标记</span></span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>和dijkstra一样,和start不连通的点是不会更新的.<br>只有SPFA的朴素版bellman_fold会更新与start不连通的点的距离.<br>同时,也只有bellman_fold有能力处理<span class='p red'>带负环的图</span>.<br>spfa能够高效判断有负环.但他也处理不了负环图.</p></div><h2 id="3305-作物杂交"><a href="#3305-作物杂交" class="headerlink" title="3305. 作物杂交"></a>3305. 作物杂交</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230327/20230327_1.jpg" alt="作物杂交"></p><div class="note success no-icon flat"><p>非常好的一道题.<br>y总说:<br>如果能整理好思路.对SPFA算法本质(DP)就有了更深刻的理解.<br>同理,如果用Dijkstra解也对Dijkstra的本质(贪心)也有更好的理解.</p></div><p>怎么说呢,我被卡在图的存储/表示这块了.<br>(看完y总的存储我感觉我又行了.)</p><p>顺利写出代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>,M = <span class="number">200010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="comment">// 题目输入</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="comment">// 培养时间</span></span><br><span class="line"><span class="type">int</span> tim[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// SPFA相关</span></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存关系 a * b -&gt; c</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> a = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 出队取消</span></span><br><span class="line">        st[a] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 松弛操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[a];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> b = e[i],c = w[i];</span><br><span class="line">            <span class="comment">// 推导出的关系式</span></span><br><span class="line">            <span class="keyword">if</span>(d[c] &gt; <span class="built_in">max</span>(d[a],d[b]) + <span class="built_in">max</span>(tim[a],tim[b]))&#123;</span><br><span class="line">                d[c] = <span class="built_in">max</span>(d[a],d[b]) + <span class="built_in">max</span>(tim[a],tim[b]);</span><br><span class="line">                <span class="comment">// 未入队的入队</span></span><br><span class="line">                <span class="keyword">if</span>(!st[c])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(c);</span><br><span class="line">                    st[c] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="type">int</span> k,T;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;tim[i];</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        d[x] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="comment">// spfa标记入队.(可取消)</span></span><br><span class="line">        st[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="comment">// 关系是可逆的</span></span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    <span class="comment">// 题目保证必有解</span></span><br><span class="line">    cout&lt;&lt;d[T]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>y总说用Dijkstra也能写(毕竟没有负权边)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>,M = <span class="number">200010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> tim[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// dijkstra相关</span></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line">priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存关系 a * b -&gt; c</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!heap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> var = heap.<span class="built_in">top</span>().second;</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line">        st[var] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[var]; ~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> b = e[i],c = w[i];</span><br><span class="line">            <span class="keyword">if</span>(d[c] &gt; <span class="built_in">max</span>(d[var],d[b]) + <span class="built_in">max</span>(tim[var],tim[b]))&#123;</span><br><span class="line">                d[c] = <span class="built_in">max</span>(d[var],d[b]) + <span class="built_in">max</span>(tim[var],tim[b]);</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;d[c],c&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="type">int</span> k,T;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;tim[i];</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        d[x] = <span class="number">0</span>;</span><br><span class="line">        heap.<span class="built_in">push</span>(&#123;d[x],x&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(k --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;d[T]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上一样,不过啊,y总的视频还是很建议看的,讲解了SPFA算法的推导过程.<br>顺带提一句: y总非常重视算法使用前的证明.</p><h2 id="852-spfa判断负环"><a href="#852-spfa判断负环" class="headerlink" title="852. spfa判断负环"></a>852. spfa判断负环</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230327/20230327_2.jpg" alt="spfa判断负环"></p><div class="note info no-icon flat"><p>前面模板就说过一次,SPFA能够判断负环,但处理不了负环图.</p><p>SPFA判断负环逻辑:<br>(抽屉原理)当发现一个点的最短路边数&gt;= n(总点数),必有环.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>,M = <span class="number">20010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">// 记录每个点的最短路边数</span></span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">    <span class="comment">// 所有点入队. 防止有未连通的点</span></span><br><span class="line">    <span class="comment">// (换个角度)相当于建立了一个与各个点距离为0的&quot;源点&quot;.保证连通</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[t] + w[i])&#123;</span><br><span class="line">                d[j] = d[t] + w[i];</span><br><span class="line">                <span class="comment">// 计算最短路边数</span></span><br><span class="line">                cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// &gt;=说明有负环</span></span><br><span class="line">                <span class="keyword">if</span>(cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">spfa</span>()) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模板题,记住前面SPFA代码模板+ 抽屉原理思路即可.</p><h2 id="341-最优贸易"><a href="#341-最优贸易" class="headerlink" title="341. 最优贸易"></a>341. 最优贸易</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230327/20230327_3.jpg" alt="最优贸易"></p><p><strong>这道题我甚至不知道怎么和SPFA扯上联系</strong>.<br>(提一嘴,这道题y总甚至写了题解!!!)</p><div class="note info no-icon flat"><p>介绍一个非常常用的思路: <strong>分段</strong><br>(一般用于前面处理和后面处理相互不影响的情况)</p><p>在本题中. 我们可以选择第k个点: 在<code>1~k</code>中找买入最小值<code>dmin[k]</code>.在<code>k~n</code>中找卖出最大值<code>dmax[k]</code>.</p><p>另外:由于不是拓扑图,状态的更新可能存在环,因此不能使用动态规划.只能使用求最短路的方式.<br>这道题不能用Dijkstra? 因此当前求出的最小值不一定是最终最小值.</p><p>整体思路:<br>求两个数组<code>dmin</code>保存买入最小值,<code>dmax</code>保存卖出最大值.</p><p>1: 由y氏dp法可得: <code>dmin[k] = min(dmin[s]...w[k])</code>,<code>dmax[k] = max(dmin[s]...w[k])</code>. </p><p>2: 因为求的是<code>k ~ n</code>的最大值,所以另外需要反向建图.<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230327/20230327_4.jpg" alt="反向建图的原因"></p><p>3: 上面分析过,由于环的存在,某些状态会反复更新,所以用最短路思想.使用SPFA.<br>更新方式就是第1步的方程.</p></div><p>不得不说: 这个思维是真的强.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,M = <span class="number">2000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],rh[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> dmin[N],dmax[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> h[],<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// spfa求&quot;最短路&quot;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> h[],<span class="type">int</span> d[],<span class="type">int</span> start,<span class="type">bool</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> dmin);</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dmin);</span><br><span class="line">    d[start] = w[start];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    st[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>((flag &amp;&amp; d[j] &gt; <span class="built_in">min</span>(d[t],w[j])) ||(!flag &amp;&amp; d[j] &lt; <span class="built_in">max</span>(d[t],w[j])))&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag) d[j] = <span class="built_in">min</span>(d[t],w[j]);</span><br><span class="line">                <span class="keyword">else</span> d[j] = <span class="built_in">max</span>(d[t],w[j]);</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(rh,<span class="number">-1</span>,<span class="keyword">sizeof</span> rh);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,op;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;op;</span><br><span class="line">        <span class="built_in">add</span>(h,a,b),<span class="built_in">add</span>(rh,b,a);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>) <span class="built_in">add</span>(h,b,a),<span class="built_in">add</span>(rh,a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>(h,dmin,<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">spfa</span>(rh,dmax,n,<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res,dmax[i] - dmin[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题我觉得需要多做几遍.</p><h2 id="1165-单词环"><a href="#1165-单词环" class="headerlink" title="1165. 单词环"></a>1165. 单词环</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230327/20230327_5.jpg" alt="单词环"></p><div class="note info no-icon flat"><p>我以为的优化: 引入一个非常新奇的角度,从而找到新的规则.<br>实际上的优化: 根据经验判断.<br>(开玩笑的了)<br>这道题还是很具有学习价值.<br>特别是建图,问题转换之类.</p><p><strong>思路</strong>:</p><p>建图:<br>题目给的点数为<code>10^5</code>.最坏情况下边数为<code>10^10</code>.这肯定是不行的.<br>必须换建图思路:<br>选取字符前两位和后两位作为点,边为字符串长度.这样我们最多有<code>676</code>个点,<code>10^5</code>条边.</p><p>01分数规划:<br><a href="https://blog.csdn.net/niiick/article/details/80925267">0/1分数规划 详解</a>.<br>总之,先求解的区间: <code>(0,1000]</code>,然后在区间中使用<strong>二分</strong>得到<code>mid</code>.<br>将问题转换为<code>len累加和 / 点个数和 &gt; mid</code>.<br>这样我们可以将每条边的边权设置为<code>len[i] - mid</code>.<br>题目转换成:判断图中是否存在正环.</p><p>最后玄学优化一波:</p></div><p>别人的总结:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230327/20230327_6.jpg" alt="本题思路"></p><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>很玄学啊!真的很玄学.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_Dijkstra求最短路</title>
      <link href="/2023/03/26/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-Dijkstra%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2023/03/26/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-Dijkstra%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>Dijkstra求最短路.<br>套路代码要牢记.</p></div><div class="note info no-icon flat"><p>朴素dijkstra写法:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="comment">// 距离数组</span></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">// 点, 边</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    d[start] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || d[j] &lt; d[t]))&#123;</span><br><span class="line">                t = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用过的标记</span></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[t] + w[t][j])&#123;</span><br><span class="line">                d[j] = d[t] + w[t][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果d[i] == 0x3f3f3f3f 则 i和start 未连通</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>堆优化版本:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边数一般比题意的大2倍</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>,M = <span class="number">2</span> * N;</span><br><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="comment">// 距离数组</span></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">// 点, 边</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    </span><br><span class="line">    d[start] = <span class="number">0</span>;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,start&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!heap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> var = t.second;</span><br><span class="line">        <span class="comment">// 用过的点跳过</span></span><br><span class="line">        <span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line">        st[var] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[var];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[var] + w[i])&#123;</span><br><span class="line">                d[j] = d[var] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;d[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果d[i] == 0x3f3f3f3f 则 i和start 未连通</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两种写法思路是一致.<br><mark>朴素版适用于点数少,边数多的稠密图.</mark><br><mark>堆优化使用于点数多,边数少的稀疏图.</mark><br>但不管怎么样,都切记<span class='p red'><strong>dijkstra不解负权图</strong></span>.<br>(负权图请用SPFA)</p></div><h2 id="1488-最短距离"><a href="#1488-最短距离" class="headerlink" title="1488. 最短距离"></a>1488. 最短距离</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230326/20230326_1.jpg" alt="最短距离"></p><div class="note success no-icon flat"><p>一道非常好的题,看完题意后,首先想到的是多源最短路Floyd.<br>但一看数据范围<code>10^5</code>,Floyd直接不能用了.<br>然后我想的是多次<code>dijkstra</code>.这样写也超时了.</p><p>一看题解.直呼NB.y总NB.</p><p>思路:</p><p>看上去是求多源最短路.<br>但如果我们添加一个虚拟的点 x,同时令所有商店到该点距离为0.<br>然后求关于x点的dijkstra.<br>不就完美的将多源变成了单源问题.</p><p>最后一点,这里因为<u>多加了一个点,边数应该要乘3</u>.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100020</span>,M = <span class="number">3</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="comment">// 距离</span></span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">// 点,边</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    d[start] = <span class="number">0</span>;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,start&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!heap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> var = t.second;</span><br><span class="line">        <span class="comment">// 只用没用过的</span></span><br><span class="line">        <span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line">        st[var] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[var];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[var] + w[i])&#123;</span><br><span class="line">                d[j] = d[var] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;d[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果d[i] == 0x3f3f3f3f 表示 i 和 start 未连通</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="comment">// x 到各个商店距离为0</span></span><br><span class="line">        <span class="built_in">add</span>(<span class="number">0</span>,x,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求最短路</span></span><br><span class="line">    <span class="built_in">dijkstra</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        cout&lt;&lt;d[x]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="903-昂贵的聘礼"><a href="#903-昂贵的聘礼" class="headerlink" title="903. 昂贵的聘礼"></a>903. 昂贵的聘礼</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230326/20230326_2.jpg" alt="昂贵的聘礼"></p><div class="note info no-icon flat"><p>这里只放了主要部分.</p><p>这道题和上面那道很像.<br>怎么说,我很快想到了解法.<br>但被一个细节绊倒了:<br>原话: 如果他和某个地位较低的人进行了交易，地位较高的的人不会再和他交易，他们认为这样等于是间接接触，反过来也一样。</p><p>我以为只需要把等级低的全去掉即可,即使用最大的等级制度区间.(过了60%)<br>但实际上,这会违背上面那句话.</p><p>别人举列:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如酋长（原点1）的等级为5，等级限制为2，如果直接用最大的区间求，那么dijkstra函数里更新最小值的时候，所有等级为3-7之间的就都能交换了，3与7能交换就与等级限制为2矛盾了</span><br></pre></td></tr></table></figure></p></div><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230326/20230326_3.jpg" alt="回答"></p><p>y总推荐写法:<br>从0开始求到1的最短路.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>,INF = <span class="number">0x3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> le[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || d[j] &lt; d[t]))</span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用后标记</span></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(le[j] &gt;= l &amp;&amp; le[j] &lt;= r)&#123;</span><br><span class="line">                d[j] = <span class="built_in">min</span>(d[j],d[t] + w[t][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(w,INF,<span class="keyword">sizeof</span> w);</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a,b,c,id,cost;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        w[i][i] = <span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        w[<span class="number">0</span>][i] = a;</span><br><span class="line">        le[i] = b;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; c;j ++)&#123;</span><br><span class="line">            cin&gt;&gt;id&gt;&gt;cost;</span><br><span class="line">            w[id][i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = le[<span class="number">1</span>] - m;i &lt;= le[<span class="number">1</span>];i ++)&#123;</span><br><span class="line">        <span class="built_in">dijkstra</span>(i,i + m);</span><br><span class="line">        res = <span class="built_in">min</span>(res,d[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我写的堆优化版本:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">20010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> level[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!heap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> var = t.second;</span><br><span class="line">        <span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line">        st[var] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[var];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[var] + w[i] &amp;&amp; level[j] &gt;= l &amp;&amp; level[j] &lt;= r)&#123;</span><br><span class="line">                d[j] = d[var] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;d[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a,c,id,cost;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;level[i]&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">0</span>,i,a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; c;j ++)&#123;</span><br><span class="line">            cin&gt;&gt;id&gt;&gt;cost;</span><br><span class="line">            <span class="built_in">add</span>(id,i,cost);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = level[<span class="number">1</span>] - m;i &lt;= level[<span class="number">1</span>];i ++)&#123;</span><br><span class="line">        <span class="built_in">dijkstra</span>(i,i + m);</span><br><span class="line">        res = <span class="built_in">min</span>(res,d[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不得不说,稠密图用堆优化dijkstra算法就是有病!</p><h2 id="342-道路与航线"><a href="#342-道路与航线" class="headerlink" title="342. 道路与航线"></a>342. 道路与航线</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230326/20230326_4.jpg" alt="道路与航线"></p><div class="note success no-icon flat"><p>这道题非常的奇特.<br>数组是不能开满的.<br>内存限制是<code>64MB</code>一共只能开<code>16,777,216</code>个int.<br>所以朴素版的dijkstra是不可能开满的.</p><p>还有,这句话感觉非常有用:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">事实上，由于最近恐怖主义太嚣张，为了社会和谐，出台了一些政策：</span><br><span class="line">保证如果有一条航线可以从 Ai到 Bi，那么保证不可能通过一些道路和航线从 Bi回到 Ai。</span><br></pre></td></tr></table></figure><br>但我不知道怎么用.555555</p><p>思路:<br>由上面题意可知:<br>有道路的,双向, 边权必为正.<br>有航线的,单向,边权可正可负. 但没有环.(保证的话)</p><p>因此:<br>对于有道路的部分,我们将其看成一个岛,使用dijkstra求最短路.<br>对于有航线的部分,我们将其看成一条线,使用<span class='p red'>拓扑排序</span> 求最短路.<br>所以,如果只看有航线的部分.这个图可以简化成有向无环图.</p><p>关于<mark>有向无环图的最短路, 必定使用<strong>拓扑序列</strong></mark>.<br>(ps,因此一般有向无环图考难一点是求最长路)</p><p>但有了思路,不一定能把题目写出来.y总说,像这样思路简单的(简单吗?),代码上的细节就少不了.(555)</p><p>说真的,有了思路后我也写不出来.5555<br>我有想过使用前面类似的<code>超级源点</code>.但在某些情况下好像是处理不了的.</p></div><p>这也叫简单!!!<br><div class="note info no-icon flat"><p><strong>y总代码思路整理</strong>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1: 先输入所有双向道路.然后求出所有所有连通块(y总用DFS),</span><br><span class="line">得到两个数组 `id[]`存储每个点属于哪个连通块.`vector&lt;int&gt; block[]`存储每个连通块中有哪些点.</span><br><span class="line">2: 输入所有航线,统计每个连通块的入度.</span><br><span class="line">3: 按照拓扑排序处理每个连通块. 先将所有入度为0的连通块编号入队.</span><br><span class="line">4: 从队头取出连通块的bid.将block[bid]中的点全部入小根堆.跑dijkstra算法.</span><br><span class="line">5: 取出堆中最小距离点var.遍历所有邻接点j.</span><br><span class="line">6: 能更新最小值就更新最小值.</span><br><span class="line">7: 如果`id[j] == id[var]`,表明在同一块中,继续使用dijkstra.</span><br><span class="line">8: 如果`id[j] != id[var]`,表明不在同一块,j所在的连通块入度-1.如果该连通块入度归0,加入队列.</span><br><span class="line"></span><br><span class="line">最后一个小细节: 由于有负边的存在,判断未连通修改为`d[i] &gt; INF / 2`.</span><br></pre></td></tr></table></figure><br>(什么时候我能写出这么优秀的代码思路啊).</p></div></p><p>y总写法:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25010</span>,M = <span class="number">200010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 题目要求</span></span><br><span class="line"><span class="type">int</span> n,mr,mp,S;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dijkstra</span></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓扑</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连通块</span></span><br><span class="line"><span class="type">int</span> id[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; block[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> bid)</span></span>&#123;</span><br><span class="line">    id[u] = bid;</span><br><span class="line">    block[bid].<span class="built_in">push_back</span>(u);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!id[j])&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(j,bid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : block[u])&#123;</span><br><span class="line">        heap.<span class="built_in">push</span>(&#123;d[c],c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!heap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> var = heap.<span class="built_in">top</span>().second;</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line">        st[var] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[var];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(id[var] != id[j] &amp;&amp; -- cnt[id[j]] == <span class="number">0</span>) q.<span class="built_in">push</span>(id[j]);</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d[var] + w[i])&#123;</span><br><span class="line">                d[j] = d[var] + w[i];</span><br><span class="line">                <span class="comment">// 不能he&#x27;b</span></span><br><span class="line">                <span class="keyword">if</span>(id[var] == id[j]) heap.<span class="built_in">push</span>(&#123;d[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cnt[i])</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">dijkstra</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;mr&gt;&gt;mp&gt;&gt;S;</span><br><span class="line">    <span class="comment">// 初始化距离</span></span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    d[S] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(mr --)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!id[i])&#123;</span><br><span class="line">            len ++;</span><br><span class="line">            <span class="built_in">dfs</span>(i,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mp --)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        cnt[id[b]] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">topsort</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i] &gt; INF / <span class="number">2</span>) cout&lt;&lt;<span class="string">&quot;NO PATH&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;d[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不得不说,写完这样一段代码,真的浑身舒畅!算法太好玩了.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing拓扑排序</title>
      <link href="/2023/03/25/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/03/25/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>拓扑排序,一个不算很常用的数据结构.<br>是BFS的一个变种.用于工作安排.<br>说不上难,但为啥y总可以把题目出成这么难的.</p></div><h2 id="3696-构造有向无环图"><a href="#3696-构造有向无环图" class="headerlink" title="3696. 构造有向无环图"></a>3696. 构造有向无环图</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230325/20230325_1.jpg" alt="构造有向无环图"></p><div class="note success no-icon flat"><p>这道题考的更多是思维.</p><p>考虑所有的有向边:<br>有环 =&gt; 无解<br><span class='p red'>无环 =&gt; 一定有解</span><br>了解这个之后,就很容易写代码了.</p><p>这里我们将有向边和无向边分开存储.</p><p>不得不说,小小一道题,完美的考察了<mark>拓扑排序</mark>的内涵.</p></div><div class="note info no-icon flat"><p>拓扑排序 + 判断是否有环:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用的是邻接表</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="comment">//添加有向边</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓扑排序 + 判断环</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 使用手写队列,方便获取拓扑排序</span></span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>,tt = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入度为0入队</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cnt[i])&#123;</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)&#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(-- cnt[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存在环</span></span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></div><p>这道题的数据量还是很大的.<br>y总建议使用<code>memset</code>时候使用<code>(n + 1) * 4</code>初始化,而不是全部初始化.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[N],ne[N],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">int</span> q[N],pos[N];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;edges[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓扑排序 + 判断有环</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>,tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">if</span>(!d[i])</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)&#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(-- d[j] == <span class="number">0</span>)</span><br><span class="line">                q[++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t -- )&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">memset</span>(h,<span class="number">-1</span>,(n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,(n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        k = idx = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> t,a,b;</span><br><span class="line">        <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">            cin&gt;&gt;t&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="keyword">if</span>(!t) edges[k ++] = &#123;a,b&#125;;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(a,b);</span><br><span class="line">                d[b] ++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">topsort</span>()) cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">            <span class="comment">// 有向边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = h[i];~j;j = ne[j])</span><br><span class="line">                    cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;e[j]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 拓扑顺序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) pos[q[i]] = i;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 无向边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">                <span class="type">int</span> a = edges[i].a,b = edges[i].b;</span><br><span class="line">                <span class="keyword">if</span>(pos[a] &gt; pos[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">                cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1191-家谱树"><a href="#1191-家谱树" class="headerlink" title="1191. 家谱树"></a>1191. 家谱树</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230325/20230325_2.jpg" alt="家谱树"></p><p>非常简单的应用.<br>唯一要注意的是<wavy>邻接表的边数</wavy>. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>,M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">int</span> q[N],hh,tt = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">if</span>(!d[i]) q[++ tt] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)&#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; ~i;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(-- d[j] == <span class="number">0</span>) q[++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">while</span>(cin&gt;&gt;x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">add</span>(i,x);</span><br><span class="line">            d[x] ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">topsort</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cout&lt;&lt;q[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="456-车站分级"><a href="#456-车站分级" class="headerlink" title="456. 车站分级"></a>456. 车站分级</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230325/20230325_3.jpg" alt="车站分级"></p><div class="note success no-icon flat"><p>这道题是真的强.<br>考点: 拓扑排序, 虚拟点, 差分约束.</p></div><p>以后再写.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_DFS</title>
      <link href="/2023/03/24/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-DFS/"/>
      <url>/2023/03/24/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-DFS/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>DFS用的好有奇效.</p><p>DFS写法继承自递归.DFS重点在于含义和剪枝.<br>DFS解决的问题都比较怎么说呢,比较抽象.</p><p>不过全排列问题依旧是DFS的强项.(但那个模板我又忘记了).</p></div><h2 id="3502-不同路径数"><a href="#3502-不同路径数" class="headerlink" title="3502. 不同路径数"></a>3502. 不同路径数</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_4.jpg" alt="不同路径数"></p><p>怎么说呢,没注意数据范围很小.<br>因此状态可以用int类型数表示</p><p>全部代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个位置向外递归</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> t,<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t)&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(num);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a = x + dx[i],b = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(a &gt;= <span class="number">0</span> &amp;&amp; a &lt; n &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; m)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(a,b,t - <span class="number">1</span>,num * <span class="number">10</span> + g[a][b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; m;j ++)&#123;</span><br><span class="line">            cin&gt;&gt;g[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; m;j ++)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i,j,k,g[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="842-排列数字"><a href="#842-排列数字" class="headerlink" title="842. 排列数字"></a>842. 排列数字</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_5.jpg" alt="排列数字"></p><p>比较简单,但一时间居然没写出来.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> path[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// k 表示位置 status表示状态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cout&lt;&lt;path[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(status &gt;&gt; i &amp; <span class="number">1</span>))&#123;</span><br><span class="line">            path[k] = i + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(k + <span class="number">1</span>,status + (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我特地去跑了下运行时间出来:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_6.jpg" alt="执行时间"></p><div class="note success no-icon flat"><p>结论: 全排序在<code>1s</code>内dfs执行最多到10. </p></div><h2 id="843-n-皇后问题"><a href="#843-n-皇后问题" class="headerlink" title="843. n-皇后问题"></a>843. n-皇后问题</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_7.jpg" alt="n-皇后问题"></p><p>这道题教会我们选择dfs的方式不同,思路就需要相应的修改.</p><p>这里有两种思路:<br>1: 遍历每个点.<br>2: 遍历每一行.<br>很显然,方式2思考的的更深刻一点.因此它的处理就更简单一点.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>,P = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="comment">// y 列, dg正截距 udg负截距</span></span><br><span class="line"><span class="type">bool</span> y[N],dg[N],udg[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历每一行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        <span class="comment">// 新的输出方式.</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">            cout&lt;&lt;g[i]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="comment">// 判断是否可放皇后</span></span><br><span class="line">        <span class="keyword">if</span>(!y[i] &amp;&amp; !udg[P + i - u] &amp;&amp; !dg[i + u] )&#123;</span><br><span class="line">            y[i] = <span class="literal">true</span>;</span><br><span class="line">            udg[P + i - u] = <span class="literal">true</span>;</span><br><span class="line">            dg[i + u] = <span class="literal">true</span>;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            g[u][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            y[i] = <span class="literal">false</span>;</span><br><span class="line">            udg[P + i - u] = <span class="literal">false</span>;</span><br><span class="line">            dg[i + u] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而方式1思考的少,因此写起来就多.<br>y总代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> row[N], col[N], dg[N * <span class="number">2</span>], udg[N * <span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (y == n) y = <span class="number">0</span>, x ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">puts</span>(g[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n])</span><br><span class="line">    &#123;</span><br><span class="line">        row[x] = col[y] = dg[x + y] = udg[x - y + n] = <span class="literal">true</span>;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, s + <span class="number">1</span>);</span><br><span class="line">        g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        row[x] = col[y] = dg[x + y] = udg[x - y + n] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="165-小猫爬山"><a href="#165-小猫爬山" class="headerlink" title="165. 小猫爬山"></a>165. 小猫爬山</h2><span class='p red'>一道和背包问题很像的暴搜题.</span><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/" alt="小猫爬山"></p><p>这道题与背包不同的原因: 物品很少,但重量非常大.</p><p><strong>这道题的思路非常的重要!!!</strong> 看完直呼NB.</p><div class="note success no-icon flat"><p><strong>思路</strong>:<br>对于第i只猫,一共有两种选择:<br>1: 放入已经存在的车中<br>2: 放入新车中<br>(这个思考模式和背包的完全一样)</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum 记录对应车上猫的总质量</span></span><br><span class="line"><span class="type">int</span> cat[N],sum[N];</span><br><span class="line"><span class="type">int</span> res = N;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑到第u只猫,当前共用了k辆车</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 剪枝1</span></span><br><span class="line">    <span class="keyword">if</span>(k &gt;= res) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">        res = k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放入已经存在的车中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[i] + cat[u] &lt;= m)&#123;</span><br><span class="line">            sum[i] += cat[u];</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>,k);</span><br><span class="line">            sum[i] -= cat[u];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 放入新车</span></span><br><span class="line">    sum[k] = cat[u];</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>,k + <span class="number">1</span>);</span><br><span class="line">    sum[k] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cin&gt;&gt;cat[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 优化查询</span></span><br><span class="line">    <span class="built_in">sort</span>(cat,cat + n,<span class="built_in">greater</span>());</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>写dfs一定要注意剪枝.养成习惯.像这道题,就有卡剪枝的时间.</p><h2 id="1209-带分数"><a href="#1209-带分数" class="headerlink" title="1209. 带分数"></a>1209. 带分数</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_8.jpg" alt="带分数"></p><p>说真的,如果不是放在DFS下面,我是想不到用DFS的.<br>不过话说过来,即使放在DFS下面,我也不知道怎么用BFS.555<br>只能说,BFS真神奇.</p><div class="note info no-icon flat"><p><strong>思路</strong>:<br>看到不要慌,整理下形式: <code>n == a + b / c</code><br><code>a b c</code> 三位正好将<code>1 ~ 9</code> 全用完.<br>所以呢, 我们只需要 弄出两个数来,剩下一个数用来判断是否成立.<br>因此,我们对形式进行变形: <code>n * c - a * c == b</code>.<br>所以我们使用<code>b</code>进行判断.<br>至于<code>a c</code> 我们使用<code>DFS</code>枚举所有情况.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[<span class="number">10</span>],backeup[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> b = n * (<span class="type">long</span> <span class="type">long</span>)c - a * c;</span><br><span class="line">    <span class="keyword">if</span>(!a || !b || !c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(backeup,st,<span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="type">int</span> x = b % <span class="number">10</span>;</span><br><span class="line">        b /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(!x || backeup[x]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        backeup[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!backeup[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_c</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> a,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &gt; <span class="number">9</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(a,c)) ans ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs_c</span>(u + <span class="number">1</span>,a,c * <span class="number">10</span> + i);</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_a</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= n) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(a) <span class="built_in">dfs_c</span>(u,a,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs_a</span>(u + <span class="number">1</span>,a * <span class="number">10</span> + i);</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs_a</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>y总建议: 在比赛中,如果没有想到这样,那就全排列,走最容易想到的写法.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> g[N];</span><br><span class="line"><span class="type">int</span> res,n;</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= l;i ++)&#123;</span><br><span class="line">        a = a * <span class="number">10</span> + g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l + <span class="number">1</span>;i &lt;= r;i ++)&#123;</span><br><span class="line">        b = b * <span class="number">10</span> + g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = r + <span class="number">1</span>;i &lt;= <span class="number">8</span>;i ++)&#123;</span><br><span class="line">        c = c * <span class="number">10</span> + g[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举位数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">7</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; <span class="number">8</span>;j ++)&#123;</span><br><span class="line">            <span class="built_in">get</span>(i,j);</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span>(n * c == a * c + b) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == <span class="number">9</span>)&#123;</span><br><span class="line">        <span class="built_in">check</span>();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            g[u] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>,status + (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结: <strong>dfs</strong>,一个很神奇的算法.我只能说神奇.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_BFS</title>
      <link href="/2023/03/24/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-BFS/"/>
      <url>/2023/03/24/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-BFS/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>BFS.经典应用: 走迷宫.<br>BFS擅长解决图中最短路相关问题.<br>当然在BFS基础上,后人进行了各种优化,所以有不同的最短路算法.</p></div><h2 id="1562-微博转发"><a href="#1562-微博转发" class="headerlink" title="1562. 微博转发"></a>1562. 微博转发</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_1.jpg" alt="微博转发"></p><p>这道题只教会我一点: <strong><code>set</code>不是无敌的</strong>,有些处理不能省.</p><p>拿到数据后,第一件事是<u>将关注列表处理成被关注列表</u>.<br>我这里认为使用set可以跳过这步,事实上想多了.</p><p>全部代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>,M = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> st[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    st[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; m;k ++)&#123;</span><br><span class="line">        <span class="type">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(len --)&#123;</span><br><span class="line">            <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = h[t];i != <span class="number">-1</span>;i = ne[i])&#123;</span><br><span class="line">                <span class="type">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                    res ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="comment">// 输入数据时,将关注列表转化成被关注列表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> x,t;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">while</span>(x --)&#123;</span><br><span class="line">            cin&gt;&gt; t;</span><br><span class="line">            <span class="built_in">add</span>(t,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line">    <span class="keyword">while</span>(q --)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">bfs</span>(x)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="845-八数码"><a href="#845-八数码" class="headerlink" title="845. 八数码"></a>845. 八数码</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_2.jpg" alt="八数码"></p><p>第一次写这道题,教会我怎么将二维与一维互换.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;string,<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    queue&lt;string&gt; q;</span><br><span class="line">    string ed = <span class="string">&quot;12345678x&quot;</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        string t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(t == ed)&#123;</span><br><span class="line">            <span class="keyword">return</span> d[ed];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// int di = t.find(&#x27;x&#x27;);</span></span><br><span class="line">        <span class="type">int</span> di = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = t.<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[i] == <span class="string">&#x27;x&#x27;</span>)&#123;</span><br><span class="line">                di = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> dist = d[t];</span><br><span class="line">        <span class="comment">// 一维转二维</span></span><br><span class="line">        <span class="type">int</span> x = di / <span class="number">3</span>,y = di % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> dx = x + dir[i][<span class="number">0</span>],dy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; <span class="number">3</span> &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="comment">// 二维转一维</span></span><br><span class="line">                <span class="type">int</span> ne = dx * <span class="number">3</span> + dy;</span><br><span class="line">                <span class="built_in">swap</span>(t[di],t[ne]);</span><br><span class="line">                <span class="keyword">if</span>(!d.<span class="built_in">count</span>(t))&#123;</span><br><span class="line">                    d[t] = dist + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">swap</span>(t[di],t[ne]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">char</span> op;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        t += op;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>(t)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1233-全球变暖"><a href="#1233-全球变暖" class="headerlink" title="1233. 全球变暖"></a>1233. 全球变暖</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230324/20230324_3.jpg" alt="全球变暖"></p><p>这道题就是典型的bfs + 附加操作.</p><p>附加操作有很多种,我这里就放我写的这种.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="type">int</span> dix[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有不沉的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> dx = x + dix[i],dy = y + diy[i];</span><br><span class="line">        <span class="keyword">if</span>(dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; n &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[dx][dy] == <span class="string">&#x27;.&#x27;</span>) flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    queue&lt;pii&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">    st[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(x,y)) flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> dx = t.x + dix[i],dy = t.y + diy[i];</span><br><span class="line">            <span class="keyword">if</span>(dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; n &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; n &amp;&amp; !st[dx][dy] &amp;&amp; g[dx][dy] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                st[dx][dy] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;dx,dy&#125;);</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(dx,dy)) flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) res ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i &lt; n;i ++) cin&gt;&gt;g[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; !st[i][j])&#123;</span><br><span class="line">                <span class="built_in">bfs</span>(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bfs真的简单,多写几次就能掌握.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing_Trie树</title>
      <link href="/2023/03/23/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-Trie%E6%A0%91/"/>
      <url>/2023/03/23/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek3/Acwing-Trie%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>Trie树.<br>一个很简单理解,但我老是写不对的数据结构.<br>trie树擅长处理大量字符串匹配问题.(但不是KMP的那种).<br>而y总常常用它来求一堆数的<mark>异或最大值</mark>.</p></div><h2 id="3485-最大异或和"><a href="#3485-最大异或和" class="headerlink" title="3485. 最大异或和"></a>3485. 最大异或和</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230323/20230323_3.jpg" alt="最大异或和"></p><p>怎么说呢,被前面单调队列影响了.<br><div class="note success no-icon flat"><p>看到连续数组和 ==&gt; 前缀和.<br>这里是连续数组异或和 ==&gt; 前缀异或和.<br>选择两个数求异或最大值 ==&gt; Trie树.</p></div></p><div class="note success no-icon flat"><p><strong>带删除的Trie树</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// cnt数组记录每个点上个数</span></span><br><span class="line"><span class="type">int</span> trie[N][<span class="number">2</span>],cnt[N],idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c = 1 添加 c = -1 删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span> ;i --)&#123;</span><br><span class="line">        <span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][u]) trie[p][u] = ++ idx;</span><br><span class="line">        p = trie[p][u];</span><br><span class="line">        <span class="comment">// 每个点都要加</span></span><br><span class="line">        cnt[p] += c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果节点被删除了,就不能用</span></span><br><span class="line">        <span class="keyword">if</span>(cnt[trie[p][!u]])&#123;</span><br><span class="line">            res += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            p = trie[p][!u];</span><br><span class="line">        &#125;<span class="keyword">else</span> p = trie[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div><p>本题全部代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3200010</span>;</span><br><span class="line"><span class="comment">// cnt数组记录每个点上总个数</span></span><br><span class="line"><span class="type">int</span> trie[N][<span class="number">2</span>],cnt[N],idx;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span> ;i --)&#123;</span><br><span class="line">        <span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][u]) trie[p][u] = ++ idx;</span><br><span class="line">        p = trie[p][u];</span><br><span class="line">        cnt[p] += c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span>;i --)&#123;</span><br><span class="line">        <span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt[trie[p][!u]])&#123;</span><br><span class="line">            res += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            p = trie[p][!u];</span><br><span class="line">        &#125;<span class="keyword">else</span> p = trie[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;q[i];</span><br><span class="line">        q[i] ^= q[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">insert</span>(q[<span class="number">0</span>],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="built_in">insert</span>(q[i],<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(i - m - <span class="number">1</span> &gt;= <span class="number">0</span>) <span class="built_in">insert</span>(q[i - m - <span class="number">1</span>],<span class="number">-1</span>);</span><br><span class="line">        res = <span class="built_in">max</span>(res,<span class="built_in">query</span>(q[i]));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="835-Trie字符串统计"><a href="#835-Trie字符串统计" class="headerlink" title="835. Trie字符串统计"></a>835. Trie字符串统计</h2><p><strong>Trie字符串的经典应用</strong><br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230323/20230323_3.jpg" alt="Trie字符串统计"></p><p>trie经典应用.<br>直接上代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> trie[N][<span class="number">26</span>],idx;</span><br><span class="line"><span class="comment">// 标记每个单词末尾即可</span></span><br><span class="line"><span class="type">int</span> nums[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = s.<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> u = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][u]) trie[p][u] = ++ idx;</span><br><span class="line">        p = trie[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[p] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = s.<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> u = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = trie[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string op,s;</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">insert</span>(s);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">query</span>(s)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>trie的练习就这些了.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing字符串KMP操作</title>
      <link href="/2023/03/23/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%AD%97%E7%AC%A6%E4%B8%B2KMP%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/03/23/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%AD%97%E7%AC%A6%E4%B8%B2KMP%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>KMP字符串匹配.多么经典的东西.(but我又忘记了)<br>牢记几点:<br>先写 匹配过程,后写<code>next数组</code>自我匹配.<br>匹配过程<code>i</code>从1开始,<code>j</code>从0开始.所以是<code>i</code>与<code>j + 1</code>对应.<br>传入的字符串想办法处理成从1开始的.(跳过边界情况)</p></div><p>这里就放上KMP最经典的匹配过程:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与主串匹配</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>;i &lt;= m;i++)&#123;</span><br><span class="line">    <span class="comment">// 突出的就是多次尝试</span></span><br><span class="line">    <span class="keyword">while</span>(j &amp;&amp; p[j + <span class="number">1</span>] != s[i]) j = ne[j];</span><br><span class="line">    <span class="comment">//匹配成功</span></span><br><span class="line">    <span class="keyword">if</span>(s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">    <span class="comment">//完全匹配</span></span><br><span class="line">    <span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">        <span class="comment">//这里写成功后的代码，比如记录匹配成功开始下标</span></span><br><span class="line">        j = ne[j];<span class="comment">//回退</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是自我匹配,这样写</span></span><br><span class="line">    <span class="comment">// ne[i] = j;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="141-周期"><a href="#141-周期" class="headerlink" title="141. 周期"></a>141. 周期</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230323/20230323_2.jpg" alt="周期"></p><div class="note info no-icon flat"><p>这里介绍<code>next数组</code>的骚操作:<br><code>n - ne[n]</code>恰好表示<code>p</code>字符串<mark>最长的<strong>最小的循环字串</strong></mark>.<br>这算是最容易考的操作了. 使用kmp + 栈 可以实现拦截双写.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> p[N];</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n,n)&#123;</span><br><span class="line">        cin&gt;&gt;p + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>,j = <span class="number">0</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">            <span class="keyword">if</span>(p[i] == p[j + <span class="number">1</span>]) j ++;</span><br><span class="line">            ne[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Test case #&quot;</span>&lt;&lt;cnt ++&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> t = i - ne[i];</span><br><span class="line">            <span class="keyword">if</span>(i % t == <span class="number">0</span> &amp;&amp; i / t &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i / t&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说来惭愧,虽然写的时候想到是个骚操作,但没记住.最终还是看了题解.55555</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing单调队列</title>
      <link href="/2023/03/22/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
      <url>/2023/03/22/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>单调队列. 属于队列中的一种.<br>单调队列的应用比较狭隘.<br>但如果不能识别出来使用单调队列的话,题目难度就上去了.</p></div><h2 id="299-裁剪序列"><a href="#299-裁剪序列" class="headerlink" title="299. 裁剪序列"></a>299. 裁剪序列</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230322/20230322_3.jpg" alt="裁剪序列"></p><div class="note info no-icon flat"><p>怎么说呢,上来王炸.<br>单调队列只是这道题的一小部分.<br>碰到这样的,最多看一眼.</p></div><h2 id="154-滑动窗口"><a href="#154-滑动窗口" class="headerlink" title="154. 滑动窗口"></a>154. 滑动窗口</h2><p><strong>非常经典的一道题.</strong></p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230322/20230322_4.jpg" alt="滑动窗口"></p><div class="note info no-icon flat"><p>滑动窗口经典代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出最小值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">    <span class="comment">// 判断是否超过窗口长度</span></span><br><span class="line">    <span class="keyword">if</span>(i - q[hh] + <span class="number">1</span> &gt; k) hh ++;</span><br><span class="line">    <span class="comment">// 给新数据腾位置</span></span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt &amp;&amp; g[i] &lt; g[q[tt]]) tt --;</span><br><span class="line">    <span class="comment">// 加入新数据</span></span><br><span class="line">    q[++ tt] = i;</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) cout&lt;&lt;g[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g[N];</span><br><span class="line"><span class="type">int</span> q[N],hh,tt = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cin&gt;&gt;g[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出最小值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">       <span class="comment">// 判断是否超过窗口长度</span></span><br><span class="line">       <span class="keyword">if</span>(i - q[hh] + <span class="number">1</span> &gt; k) hh ++;</span><br><span class="line">       <span class="comment">// 给新数据腾位置</span></span><br><span class="line">       <span class="keyword">while</span>(hh &lt;= tt &amp;&amp; g[i] &lt; g[q[tt]]) tt --;</span><br><span class="line">       <span class="comment">// 加入新数据</span></span><br><span class="line">       q[++ tt] = i;</span><br><span class="line">       <span class="comment">// 输出</span></span><br><span class="line">       <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) cout&lt;&lt;g[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    hh = <span class="number">0</span>,tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i - q[hh] + <span class="number">1</span> &gt; k) hh ++;</span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt &amp;&amp; g[i] &gt; g[q[tt]]) tt --;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>) cout&lt;&lt;g[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就这个滑动窗口,基本上和单调队列绑定在一起了.</p><h2 id="135-最大子序和"><a href="#135-最大子序和" class="headerlink" title="135. 最大子序和"></a>135. 最大子序和</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230322/20230322_5.jpg" alt="最大子序和"></p><p>这道题可以看成上面一道题的变形.<br>也可以看出来,只要识别出有滑动窗口那意味,就使用单调队列.</p><div class="note success no-icon flat"><p>但并不影响这道题的细节多.</p><p>细节1: <mark>处理成前缀和后,要操作的个数要+1 </mark><br>细节2: <mark>要提前将0放入队列,防止丢失从开头开始算的情况</mark></p><p>细节3: <mark>必须在添加新元素前求最大值</mark>.(因为队列是维护最小值,新的值先加入会影响计算)</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> q[N],hh,tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">-1e9</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提前插入0,防止忽略从开头开始算的情况</span></span><br><span class="line">    tt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 滑动获取最小值(l - 1)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="comment">// 由前缀和公式知,需要多处理一位</span></span><br><span class="line">        <span class="keyword">if</span>(i - q[hh]&gt; m) hh ++;</span><br><span class="line">        <span class="comment">// 先处理</span></span><br><span class="line">        res = <span class="built_in">max</span>(res,s[i] - s[q[hh]]);</span><br><span class="line">        <span class="comment">// 添加新元素</span></span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt &amp;&amp; s[i] &lt; s[q[tt]]) tt --;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1089-烽火传递"><a href="#1089-烽火传递" class="headerlink" title="1089. 烽火传递"></a>1089. 烽火传递</h2><div class="note info no-icon flat"><p>另一个应用方向,在dp中使用.</p></div><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230323/20230323_1.jpg" alt="烽火传递"></p><p>dp含义: <code>dp[i]</code>表示<code>1~i</code>符合题目条件,且<span class='p red'>第i个台一定要点亮</span><br>dp表示: <code>dp[i] = min(dp[j]) + g[i]; (i - m &lt;= j &lt;= i - 1)</code>.<br>而单调队列就是用来求固定区间最值的.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> g[N];</span><br><span class="line"><span class="type">int</span> q[N],hh,tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="comment">// 和后面统一形式</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;g[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dp[0] = 0入队</span></span><br><span class="line">    tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="comment">// 不在集合中</span></span><br><span class="line">        <span class="keyword">if</span>(q[hh] &lt; i - m) hh ++;</span><br><span class="line">        dp[i] = dp[q[hh]] + g[i];</span><br><span class="line">        <span class="keyword">while</span>(hh &lt;= tt &amp;&amp; dp[i] &lt; dp[q[tt]]) tt --;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - m + <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        res = <span class="built_in">min</span>(res,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>牢记:<br>当需要求<u>滑动窗口最值</u>时,立即使用单调队列.<br>当需要求<u>最近较小/大值</u>时,立即使用单调栈.</p></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing哈希</title>
      <link href="/2023/03/22/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%93%88%E5%B8%8C/"/>
      <url>/2023/03/22/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>哈希.神一般的数据结构.<br>我的建议是,能用系统提供的就用系统提供的.</p></div><h2 id="2058-笨拙的手指"><a href="#2058-笨拙的手指" class="headerlink" title="2058. 笨拙的手指"></a>2058. 笨拙的手指</h2><div class="note warning no-icon flat"><p>这道题还是有点难度的,不过难的不在哈希.<br>而是在进制的转换.</p></div><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230322/20230322_1.jpg" alt="笨拙的手指"></p><p>看完直接模拟.不过这里的进制转化有点困难.</p><p>值得注意的一点,这里用到一个以后也会很常用的算法:<br><div class="note info no-icon flat"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 b 进制下 s 转换成十进制下的数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">base</span><span class="params">(string s,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : s)</span><br><span class="line">    res  = res * b + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></p><p>但这题还是有的陷阱的.<br>比如这个数据:<code>1110 \n 220</code>.<br>在漏写情况下可以是<code>0110  020</code>,这样就找的结果6.但这是不对的.<br><span class='p red'>题目中明确说了:只会写错</span>.因此必须特判前导零.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 b 进制下 s 转换成十进制下的数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">base</span><span class="params">(string s,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : s)</span><br><span class="line">        res  = res * b + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">    string x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = x.<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">        string s = x;</span><br><span class="line">        s[i] ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(len &amp;&amp; s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        set.<span class="built_in">insert</span>(<span class="built_in">base</span>(s,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = y.<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">        string s = y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] - <span class="string">&#x27;0&#x27;</span> != j)&#123;</span><br><span class="line">                s[i] = <span class="string">&#x27;0&#x27;</span> + j;</span><br><span class="line">                <span class="keyword">if</span>(len &amp;&amp; s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> n = <span class="built_in">base</span>(s,<span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span>(set.<span class="built_in">count</span>(n))&#123;</span><br><span class="line">                    cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="841-字符串哈希"><a href="#841-字符串哈希" class="headerlink" title="841. 字符串哈希"></a>841. 字符串哈希</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230322/20230322_2.jpg" alt="字符串哈希"></p><p>哈希另外一个经典应用: <strong>字符串哈希</strong></p><p>字符串哈希利用了前缀和知识.<br>先选择一个比较大的质数(比如<code>131</code>,或者<code>13331</code>),同时将数据类型开到最大<code>unsigned long long</code>.<br>然后使用前缀和思想构造哈希数组.</p><p>具体处理代码如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">131</span>,N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"></span><br><span class="line">ull p[N],ha[N];</span><br><span class="line"><span class="type">char</span> s[N]; <span class="comment">// 输入从1开始</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        ha[i] = ha[i - <span class="number">1</span>] * P + s[i];</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">get</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ha[r] - ha[l] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题全部代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">131</span>,N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"></span><br><span class="line">ull p[N],ha[N];</span><br><span class="line"><span class="type">char</span> s[N]; <span class="comment">// 输入从1开始</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    cin&gt;&gt;s +<span class="number">1</span>;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        ha[i] = ha[i - <span class="number">1</span>] * P + s[i];</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x,y,a,b;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        ull t1 = ha[y] - ha[x - <span class="number">1</span>] * p[y - x + <span class="number">1</span>];</span><br><span class="line">        ull t2 = ha[b] - ha[a - <span class="number">1</span>] * p[b - a + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(t1 == t2) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>哈希很好用的.有时候需要使用数字代替名字时,一般我们就是开一个哈希表来记录两者之间的关系.(在今天的比赛中遇见老多了).</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing并查集</title>
      <link href="/2023/03/21/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2023/03/21/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>并查集: 一种快速判断两者关系的结构.<br>当题目需要多次询问不同两者之间的关系时使用.<br>一般想到使用并查集后,题目难度就下降一个等级.</p></div><h2 id="240-食物链"><a href="#240-食物链" class="headerlink" title="240. 食物链"></a>240. 食物链</h2><p><strong>这道题算的上是将并查集藏得比较深的.</strong><br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230321/20230321_4.jpg" alt="食物链"></p><p>核心: <mark>并查集 + 集内与根节点的距离</mark><br>另外类似的一题:<br><a href="https://www.acwing.com/problem/content/839/">837. 连通块中点的数量</a>核心: <mark>并查集 + 集合点总数</mark></p><p>这道题需要对 并查集核心函数 进行部分修改.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x)&#123;</span><br><span class="line">        <span class="comment">// 求父</span></span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="comment">// 求距离</span></span><br><span class="line">        eat[x] += eat[p[x]];</span><br><span class="line">        p[x] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>本题全部代码</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N],d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != p[x])&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x] += d[p[x]];</span><br><span class="line">        p[x] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) p[i] = i;</span><br><span class="line">    <span class="type">int</span> op,a,b;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(a),pb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(a &gt; n || b &gt; n) res ++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pa == pb &amp;&amp; (d[a] - d[b]) % <span class="number">3</span>) res ++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pa != pb)&#123;</span><br><span class="line">                    p[pa] = pb;</span><br><span class="line">                    d[pa] = d[b] - d[a];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(pa == pb &amp;&amp; (d[b] - d[a] - <span class="number">1</span>)%<span class="number">3</span>) res ++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(pa != pb)&#123;</span><br><span class="line">                    p[pa] = pb;</span><br><span class="line">                    d[pa] = d[b] - <span class="number">1</span> - d[a];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本道题对并查集的运用可以说是非常的到位.</p><h2 id="238-银河英雄传说"><a href="#238-银河英雄传说" class="headerlink" title="238. 银河英雄传说"></a>238. 银河英雄传说</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230321/20230321_5.jpg" alt="银河英雄传说"></p><div class="note success no-icon flat"><p>没活了,整个大杂烩.<br>就是将前面两个辅助数组全部都用上就行了.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N], d[N],cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x] += d[p[x]];</span><br><span class="line">        p[x] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; N;i ++)&#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        cnt[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(a),pb = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pa != pb)&#123;</span><br><span class="line">                p[pa] = pb;</span><br><span class="line">                <span class="comment">// 距离赋值 恰好是 原集合的大小</span></span><br><span class="line">                d[pa] = cnt[pb];</span><br><span class="line">                cnt[pb] += cnt[pa];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(pa != pb) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">            <span class="comment">// 必须特判列的头节点</span></span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">abs</span>(d[a] - d[b]) - <span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>写完今天的题目,可以看出并查集一共就两个附加操作.<br>虽然简单,但并不影响并查集的强大.</p></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing递归</title>
      <link href="/2023/03/21/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E9%80%92%E5%BD%92/"/>
      <url>/2023/03/21/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek2/Acwing%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>递归的代表: dfs.<br>递归核心: 递归函数的含义.</p></div><h2 id="1497-树的遍历"><a href="#1497-树的遍历" class="headerlink" title="1497. 树的遍历"></a>1497. 树的遍历</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230321/20230321_1.jpg" alt="树的遍历"></p><div class="note success no-icon flat"><p>如果叫我手动模拟的话,非常的简单.<br>但要我教程序的话,非常的困难.</p></div><div class="note danger no-icon flat"><p>y总说:<br>这个题目非常非常的经典.一定要背过.<br>注意这道题中: <mark>每一个点的值都是唯一的.</mark></p></div><p>看完视频,这道题还是挺简单的.<br>递归函数含义: 使用传入的中序遍历 + 后序遍历 构建成树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> postorder[N],inorder[N];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; l,r,pos;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过传入的数据构建二叉树</span></span><br><span class="line"><span class="comment">// pl,pr: 后序左右端 il,ir: 中序左右端</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pl,<span class="type">int</span> pr,<span class="type">int</span> il,<span class="type">int</span> ir)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> root = postorder[pr];</span><br><span class="line">    <span class="comment">// 找root在 中序遍历中的位置</span></span><br><span class="line">    <span class="type">int</span> k = pos[root];</span><br><span class="line">    <span class="keyword">if</span>(il &lt; k) l[root] = <span class="built_in">build</span>(pl,k - <span class="number">1</span> - il + pl,il,k - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(ir &gt; k) r[root] = <span class="built_in">build</span>(k - il + pl,pr - <span class="number">1</span>,k + <span class="number">1</span>,ir);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bfs写层序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> root)</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout&lt;&lt;t&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(l.<span class="built_in">count</span>(t)) q.<span class="built_in">push</span>(l[t]);</span><br><span class="line">        <span class="keyword">if</span>(r.<span class="built_in">count</span>(t)) q.<span class="built_in">push</span>(r[t]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cin&gt;&gt;postorder[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;inorder[i];</span><br><span class="line">        <span class="comment">// 标记位置</span></span><br><span class="line">        pos[inorder[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root = <span class="built_in">build</span>(<span class="number">0</span>,n - <span class="number">1</span>,<span class="number">0</span>,n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">bfs</span>(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="97-约数之和"><a href="#97-约数之和" class="headerlink" title="97. 约数之和"></a>97. 约数之和</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230321/20230321_2.jpg" alt="约数之和"></p><p>这道题需要补充相关的数论知识.</p><div class="note info no-icon flat"><p>快速幂模板:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// m^k % p == (m % p)^k % p; </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> k,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">  m %= p;</span><br><span class="line">  <span class="keyword">while</span>(k)&#123;</span><br><span class="line">    <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * m % p;</span><br><span class="line">    m = m * m % p;</span><br><span class="line">    k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果害怕过程中爆int,可以使用ll类型.</p></div><p>本题代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">9901</span>;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; prime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a^k % p = ((a % p)^k) % p</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    a %= mod;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求 p^0 + p^1 + ... + p^(k - 1) </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 奇数个</span></span><br><span class="line">    <span class="keyword">if</span>(k % <span class="number">2</span>) <span class="keyword">return</span> (<span class="built_in">qmi</span>(p,k - <span class="number">1</span>) + <span class="built_in">sum</span>(p,k - <span class="number">1</span>)) % mod;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">qmi</span>(p,k / <span class="number">2</span>) + <span class="number">1</span>) * <span class="built_in">sum</span>(p,k / <span class="number">2</span>) % mod;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(!a)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 试除法求a的所有约数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= a / i;i ++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(a % i == <span class="number">0</span>)&#123;</span><br><span class="line">            prime[i] ++;</span><br><span class="line">            a /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; <span class="number">1</span>) prime[a] ++;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c : prime)&#123;</span><br><span class="line">        <span class="type">int</span> p = c.first;</span><br><span class="line">        <span class="type">int</span> k = c.second * b;</span><br><span class="line">        <span class="comment">// 递归求</span></span><br><span class="line">        res = (res * <span class="built_in">sum</span>(p,k + <span class="number">1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="98-分形之城"><a href="#98-分形之城" class="headerlink" title="98. 分形之城"></a>98. 分形之城</h2><p>做过,怎么忘了啊.<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230321/20230321_3.jpg" alt="分形之城"></p><p>考的是坐标的变换,还有方向相关处理.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    LL x;</span><br><span class="line">    LL y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">get</span><span class="params">(<span class="type">int</span> n,LL a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    LL len = <span class="number">1ll</span> &lt;&lt; (n - <span class="number">1</span>);</span><br><span class="line">    LL size = <span class="number">1ll</span> &lt;&lt; (<span class="number">2</span> * n - <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 求在低一级的位置</span></span><br><span class="line">    Point p = <span class="built_in">get</span>(n - <span class="number">1</span>,a % size);</span><br><span class="line">    LL x = p.x,y = p.y;</span><br><span class="line">    <span class="comment">// 判断在本级位置</span></span><br><span class="line">    <span class="type">int</span> t = a / size;</span><br><span class="line">    <span class="comment">// 四个方向的变换</span></span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">0</span>) <span class="keyword">return</span> &#123;y,x&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">1</span>) <span class="keyword">return</span> &#123;x,y + len&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>) <span class="keyword">return</span> &#123;x + len,y + len&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> &#123;len * <span class="number">2</span> - y - <span class="number">1</span>,len - <span class="number">1</span> - x&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        LL n,a,b;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        Point p1 = <span class="built_in">get</span>(n,a - <span class="number">1</span>);</span><br><span class="line">        Point p2 = <span class="built_in">get</span>(n,b - <span class="number">1</span>);</span><br><span class="line">        <span class="type">double</span> x = p1.x - p2.x,y = p1.y - p2.y;</span><br><span class="line">        <span class="comment">// 加0.5实现四舍五入</span></span><br><span class="line">        cout&lt;&lt;(LL)(<span class="built_in">sqrt</span>(x * x + y * y) * <span class="number">10</span> + <span class="number">0.5</span>)&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题还是很有意思的.观察图形获取信息然后解题.</p><p>递归还是很有难度,这地方可以出很多题目,而且这些题目都不是简单思考可以解决的.<br>最重要的是,能看出题目重叠性质.明确递归函数的含义.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第95场</title>
      <link href="/2023/03/20/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC95%E5%9C%BA/"/>
      <url>/2023/03/20/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC95%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>题目列表:<br><a href="https://www.acwing.com/problem/content/4876/">4873. 简单计算</a><br><a href="https://www.acwing.com/problem/content/4877/">4874. 约数</a><br><a href="https://www.acwing.com/problem/content/4878/">4875. 整数游戏</a></p><p>这次的周赛还是有点难度的.</p></div><h2 id="4873-简单计算"><a href="#4873-简单计算" class="headerlink" title="4873. 简单计算"></a>4873. 简单计算</h2><p>简单的签到题<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> x1,x2,y1,y2;</span><br><span class="line">    cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(<span class="built_in">abs</span>(x1 - x2),<span class="built_in">abs</span>(y1 - y2))&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4874-约数"><a href="#4874-约数" class="headerlink" title="4874. 约数"></a>4874. 约数</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230320/20230320_1.jpg" alt="约数"></p><p>写前观察数据范围, <code>10^5</code>选择大概在<code>nLgN</code>范围的算法.<br>同时像这样的题,我们必须要有数论相干的知识:<br><div class="note success no-icon flat"><p>如果一个数的约数个数是<font color=red>奇数</font> , 则它一定是一个完全平方数! 即它一定是可开方的.</p><p>因此,这道题不是去直接求数的约数个数,而是分两步:<br>1: 判断是否是完全平方数 + 开根号求 x<br>2: 判断 x 是否是质数.</p></div></p><p>不得不说,这道题还是出的太巧妙了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线性筛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span> ; i&lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[cnt ++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;prime[j] * i &lt;= n;j ++)&#123;</span><br><span class="line">            st[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过筛选后:<br>1: st数组标记了n以内每一个数据是否是质数.<br>2: prime数组存储n以内的所有质数,cnt用来计数.</p><p><strong>题目代码</strong>:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> prime[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性筛</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span> ; i&lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) prime[cnt ++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;prime[j] * i &lt;= n;j ++)&#123;</span><br><span class="line">            st[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_prime</span>(N - <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n -- )&#123;</span><br><span class="line">        ll a;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        ll x = <span class="built_in">sqrt</span>(a);</span><br><span class="line">        <span class="keyword">if</span>(x * x == a &amp;&amp; !st[x]) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>在考试的时候,在疯狂的尝试用求个数的代码.到最后几分钟才想起没准3是特别设计过的.</p><h2 id="4875-整数游戏"><a href="#4875-整数游戏" class="headerlink" title="4875. 整数游戏"></a>4875. 整数游戏</h2><p>看题意,应该是博弈论相关.<br><a href="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230320/20230320_2.jpg">整数游戏</a></p><div class="note info no-icon flat"><p>y总提示:<br>对于博弈论题目: <mark>大胆假设,小心求证</mark></p><p>证什么? 证 必胜 与 必败 之间的转换.</p><p>对于这道题:<br>必胜条件: 第一个数 不是最小的数<br>必败条件: 第一个数 是最小的数<br>有了这个, 这道题就变得非常非常的简单了.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            cin&gt;&gt;y;</span><br><span class="line">            <span class="keyword">if</span>(y &lt; x) flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) cout&lt;&lt;<span class="string">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次周赛考的是思维吧!!</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing递推</title>
      <link href="/2023/03/18/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E9%80%92%E6%8E%A8/"/>
      <url>/2023/03/18/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E9%80%92%E6%8E%A8/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>递推,上难度了!<br>不过一般递推时间复杂度都很高,一般是放在填空题的最后几道.</p></div><h2 id="3777-砖块"><a href="#3777-砖块" class="headerlink" title="3777. 砖块"></a>3777. 砖块</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230318/20230318_5.jpg" alt="砖块"></p><p>正常想是有点困难的.这个时候就要学会直接暴力.<br>(正好数据范围很小)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">char</span>&amp; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;W&#x27;</span>) c = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> c = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    string s = str;</span><br><span class="line">    <span class="comment">// 直接尝试修改</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] != c)&#123;</span><br><span class="line">            <span class="built_in">update</span>(s[i]);</span><br><span class="line">            <span class="built_in">update</span>(s[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// i + 1 因为题目数组从1开始</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后一位不同 =&gt; 修改失败</span></span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">back</span>() != c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    cout&lt;&lt;res.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i : res) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">// 只有上面有输出才能换行</span></span><br><span class="line">    <span class="keyword">if</span>(res.<span class="built_in">size</span>())cout&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;str;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">check</span>(<span class="string">&#x27;B&#x27;</span>) &amp;&amp; !<span class="built_in">check</span>(<span class="string">&#x27;W&#x27;</span>)) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1208-翻硬币"><a href="#1208-翻硬币" class="headerlink" title="1208. 翻硬币"></a>1208. 翻硬币</h2><p>蓝桥杯上的题(也是维视蓝桥杯被称为暴力杯的原因)<br>全是套路,没有技巧!</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230318/20230318_6.jpg" alt="翻硬币"></p><p>和上面一摸一样的套路<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string start,e;</span><br><span class="line"><span class="type">int</span> res = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">char</span>&amp; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;o&#x27;</span>) c = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> c = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = start.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    string s = start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] != e[i])&#123;</span><br><span class="line">            <span class="built_in">update</span>(s[i]);</span><br><span class="line">            <span class="built_in">update</span>(s[i + <span class="number">1</span>]);</span><br><span class="line">            ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s[n - <span class="number">1</span>] == e[n - <span class="number">1</span>])&#123;</span><br><span class="line">        res = <span class="built_in">min</span>(res,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;start&gt;&gt;e;</span><br><span class="line">    <span class="built_in">check</span>();</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="95-费解的开关"><a href="#95-费解的开关" class="headerlink" title="95. 费解的开关"></a>95. 费解的开关</h2><p>这道题还是有点不同的!<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230318/20230318_7.jpg" alt="费解的开关"></p><p>这道题可能会想到和上面相似的思路.但不是那样是实现的.因为具体的逻辑是不太一样的.</p><p>所以又没有思路了,这时我们可以通过<code>最少</code> 想到bfs.</p><h3 id="BFS写法"><a href="#BFS写法" class="headerlink" title="BFS写法"></a>BFS写法</h3><p>bfs写法复杂度高达O(2^25) 大概<code>3 * 10^7</code>,只能说勉强能过.<br>对于不必要的,必须剪枝.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 改变选定位置</span></span><br><span class="line">    x ^= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    <span class="comment">// 左 非最左边</span></span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">5</span>) x ^= (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>));  </span><br><span class="line">    <span class="comment">// 上 非第一排</span></span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">5</span>) x ^= (<span class="number">1</span> &lt;&lt; (i - <span class="number">5</span>));</span><br><span class="line">    <span class="comment">// 下 非最后一排</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">20</span>) x ^= (<span class="number">1</span> &lt;&lt; (i + <span class="number">5</span>));</span><br><span class="line">    <span class="comment">// 特判第一排</span></span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">5</span> &lt; <span class="number">4</span>) x ^= (<span class="number">1</span> &lt;&lt; (i + <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> statue = (<span class="number">1</span> &lt;&lt; <span class="number">25</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 设为1 方便将无解-1统一到一起.</span></span><br><span class="line">    vis[statue] = <span class="number">1</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(statue);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 大于6步,立马剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(vis[t] == <span class="number">7</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 从0开始,方便取模</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">25</span>;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> c = <span class="built_in">change</span>(t,i);</span><br><span class="line">            <span class="keyword">if</span>(!vis.<span class="built_in">count</span>(c))&#123;</span><br><span class="line">                vis[c] = vis[t] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t -- )&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">25</span>;i ++)&#123;</span><br><span class="line">            <span class="type">char</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            num += ((x - <span class="string">&#x27;0&#x27;</span>) &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;(vis[num] - <span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在没有思路时,像这样暴力的方法还是需要会的.</p><h3 id="递推解法"><a href="#递推解法" class="headerlink" title="递推解法"></a>递推解法</h3><p>通过观察发现,如果我们可以固定第一行,则对于第一行中的0,我们只能通过改变下一行的灯使其变1.<br>因此,我们先枚举第1行所有改变情况,然后递推2,3,4行,第5行用来判断是否成功.</p><div class="note info no-icon flat"><p>至于为啥对第1行进行特殊处理,这就是和前两道题不同的地方了.<br>要多想.</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[<span class="number">5</span>][<span class="number">5</span>],bg[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">5</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; <span class="number">5</span>;k ++)&#123;</span><br><span class="line">        <span class="type">int</span> di = i + dir[k][<span class="number">0</span>],dj = j + dir[k][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(di &lt; <span class="number">0</span> || di &gt;= <span class="number">5</span> || dj &lt; <span class="number">0</span> || dj &gt;= <span class="number">5</span>) <span class="keyword">continue</span>;</span><br><span class="line">        g[di][dj] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;i ++) cin&gt;&gt; bg[i];</span><br><span class="line">        <span class="type">int</span> res = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> op = <span class="number">0</span>;op &lt; <span class="number">32</span>;op ++)&#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(g,bg,<span class="keyword">sizeof</span> bg);</span><br><span class="line">            <span class="comment">// 处理第一行</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(op &gt;&gt; j &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="built_in">change</span>(<span class="number">0</span>,j);</span><br><span class="line">                    cnt ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i ++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j ++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                        <span class="built_in">change</span>(i + <span class="number">1</span>,j);</span><br><span class="line">                        cnt ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(g[<span class="number">4</span>][i] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    cnt = <span class="number">8</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">min</span>(res,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res &gt; <span class="number">6</span>) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码上比上面少很多,不过这些都是建立在对题意把握的份上.</p><p>递推识别起来不难,难的是想最后这道题一样需要额外的处理.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing双指针</title>
      <link href="/2023/03/18/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2023/03/18/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>双指针算的上是一个很有技巧的算法.<br>双指针分两种: 快慢指针, 相反指针.<br>其中快慢指针非常的常见, 相反指针我只用过一次(还是模板题).</p></div><h2 id="799-最长连续不重复子序列"><a href="#799-最长连续不重复子序列" class="headerlink" title="799. 最长连续不重复子序列"></a>799. 最长连续不重复子序列</h2><p><mark>非常经典的双指针例题</mark><br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230318/20230318_1.jpg" alt="最长连续不重复子序列"></p><p>这道题的数据范围给的非常好,类似的情况我们可以用<code>set</code>来代替<code>s数组</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i ++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="comment">// 将要添加的已经存在,去掉</span></span><br><span class="line">        <span class="keyword">while</span>(s[a[i]])&#123;</span><br><span class="line">            s[a[j ++]] --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        s[a[i]] ++;</span><br><span class="line">        <span class="comment">// 计算最大长度</span></span><br><span class="line">        res = <span class="built_in">max</span>(res,i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放y总的:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        s[q[i]] ++ ;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; i &amp;&amp; s[q[i]] &gt; <span class="number">1</span>) s[q[j ++ ]] -- ;</span><br><span class="line">        res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>自我感觉<code>j &lt; i</code>可以去掉.总体思路是一样的.</p><h2 id="2816-判断子序列"><a href="#2816-判断子序列" class="headerlink" title="2816. 判断子序列"></a>2816. 判断子序列</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230318/20230318_2.jpg" alt="判断子序列"></p><p><strong>简单但容易犯错</strong></p><p>这题的数据很有意思,如果不加以判断则很容易出错.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i ++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m;i ++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i ++)&#123;</span><br><span class="line">        <span class="comment">// 必须加上判断 j &lt; n</span></span><br><span class="line">        <span class="keyword">if</span>(b[i] == a[j] &amp;&amp; j &lt; n) j ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j == n) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>要么就像y总这样写:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] == b[j]) i ++ ;</span><br><span class="line">    j ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>保证不会翻车.</p><h2 id="1238-日志统计"><a href="#1238-日志统计" class="headerlink" title="1238. 日志统计"></a>1238. 日志统计</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230318/20230318_3.jpg" alt="日志统计"></p><p>非常好的一道题.(当然也是蓝桥杯原题)<br>熟练使用<code>pair</code>和 <code>双指针</code>算法.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line">pii logs[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,d,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;d&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        logs[i] = &#123;a,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(logs,logs + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> id = logs[i].y;</span><br><span class="line">        cnt[id] ++;</span><br><span class="line">        <span class="comment">// 去除失效的赞</span></span><br><span class="line">        <span class="keyword">while</span>(logs[i].x - logs[j].x &gt;= d)&#123;</span><br><span class="line">            cnt[logs[j].y] --;</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 肯定是判断当前</span></span><br><span class="line">        <span class="keyword">if</span>(cnt[id] &gt;= k)&#123;</span><br><span class="line">            st[id] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i])&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也算是最后几道题,其实算法并不是很复杂.关键是要对自己有信心!!!</p><h2 id="1240-完全二叉树的权值"><a href="#1240-完全二叉树的权值" class="headerlink" title="1240. 完全二叉树的权值"></a>1240. 完全二叉树的权值</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230318/20230318_4.jpg" alt="完全二叉树的权值"></p><p>写这道题之前必须了解完全二叉数的定义.<br>简单的来说,完全二叉数是指除了最后一行,其他行都是满的二叉树.</p><p>虽然y总把这道题也放在双指针这里,但我第一时间想到的却不是双指针.<br>而是一种更简单的方式.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="comment">// 相加和会爆int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="comment">// 2的18次方超过10^5</span></span><br><span class="line">ll cnt[<span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">// 求最高层数</span></span><br><span class="line">    <span class="type">int</span> t = (<span class="type">int</span>)<span class="built_in">log2</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="comment">// (int)log2(i) + 1 直接求对应的层数</span></span><br><span class="line">        cnt[(<span class="type">int</span>)<span class="built_in">log2</span>(i) + <span class="number">1</span>] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先赋值为最小值</span></span><br><span class="line">    ll res = <span class="number">-1e18</span>;</span><br><span class="line">    <span class="type">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res &lt; cnt[i])&#123;</span><br><span class="line">            h = i;</span><br><span class="line">            res = cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;h&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我是利用<code>(int)log2(i) + 1</code> 直接求出所在层数.在输入阶段即可完成累加.</p><p>不过这道题其他地方还是很恶心的.(爆int, 数据有正有负)</p><p>y总使用双指针:<br>一个控制每层最大几个数,<br>另一个将实际的数据累加起来.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    LL maxs = <span class="number">-1e18</span>;</span><br><span class="line">    <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">1</span>, i = <span class="number">1</span>; i &lt;= n; i *= <span class="number">2</span>, d ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        LL s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; d - <span class="number">1</span>) &amp;&amp; j &lt;= n; j ++ )</span><br><span class="line">            s += a[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s &gt; maxs)</span><br><span class="line">        &#123;</span><br><span class="line">            maxs = s;</span><br><span class="line">            depth = d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, depth);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双指针在蓝桥杯中还是挺常见的.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing二分查找</title>
      <link href="/2023/03/17/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2023/03/17/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>二分查找虽然思想简单,但能做到查找无错还是非常困难的.<br>因此需要经常复习.</p><p>口诀:<br><mark>while中只写<code>l &lt; r</code>,r = mid mid不变, l = mid mid + 1.判断好情况再动手</mark></p><p>用二分法解决的问题必须是有二分性质的.</p></div><h2 id="1460-我在哪？"><a href="#1460-我在哪？" class="headerlink" title="1460. 我在哪？"></a>1460. 我在哪？</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230317/20230317_1.jpg" alt="我在哪？"></p><p>这道题没写出来,我只能说是太久没写题目了.很多东西反应都没了.<br>这道题的特点还是非常的明显的:<br>最小的K =&gt; 二分<br>字符字串比较 =&gt; 字符哈希</p><p>搞清楚了这两点,这道题就非常的简单了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">unordered_set&lt;string&gt; S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    S.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="comment">// i + x - 1 ?</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i + x - <span class="number">1</span> &lt; n;i ++)&#123;</span><br><span class="line">        string t = str.<span class="built_in">substr</span>(i,x);</span><br><span class="line">        <span class="keyword">if</span>(S.<span class="built_in">count</span>(t)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        S.<span class="built_in">insert</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;str;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>,r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说,这道题还是很好的.</p><p>不过呢,这道题也可以通过暴力解决.5555<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;str;</span><br><span class="line">    <span class="comment">// 遍历k值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;k ++)&#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 判断i j开头的字串是否相等</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i + k - <span class="number">1</span> &lt; n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j + k - <span class="number">1</span> &lt; n;j ++)&#123;</span><br><span class="line">                <span class="type">bool</span> same = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> u = <span class="number">0</span>;u &lt; k;u ++)&#123;</span><br><span class="line">                    <span class="comment">// 存在不等</span></span><br><span class="line">                    <span class="keyword">if</span>(str[i + u] != str[j + u])&#123;</span><br><span class="line">                        same = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 有相同的 k值无效</span></span><br><span class="line">                <span class="keyword">if</span>(same)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 无效直接去下一个k</span></span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            cout&lt;&lt;k&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里贴上暴力写法,因为比赛场上,写出暴力也算是一种胜利!</p><h2 id="1221-四平方和"><a href="#1221-四平方和" class="headerlink" title="1221. 四平方和"></a>1221. 四平方和</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230317/20230317_2.jpg" alt="四平方和"></p><p>在考场上,如果暂时想不到怎么写.首先必须要会暴力解题.<br><strong>暴力解</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">0</span>;a * a &lt;= n;a ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> b = a;b * b + a * a &lt;= n;b ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c = b;c * c + b * b + a * a &lt;= n;c ++)&#123;</span><br><span class="line">                <span class="type">int</span> t = n - (c * c + b * b + a * a);</span><br><span class="line">                <span class="type">int</span> d = <span class="built_in">sqrt</span>(t);</span><br><span class="line">                <span class="keyword">if</span>(d * d == t)&#123;</span><br><span class="line">                    cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;c&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们通过数据范围<code>5 * 10^6</code> 可以算出最坏可以跑到<code>10^10</code>左右.肯定是会超时的.<br>但是,没有思路一定要先这样写.思路可以慢慢找,题目先写出来再说.</p><p>这道题,我也想过通过二分,但这一共有4个数,怎么使用二分?<br>真是头疼!</p><p>y总表示: 强行<mark>将四个分成两组</mark>.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先跑一遍算出来</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1965411</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Num</span>&#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="type">int</span> c,d;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重载 &lt;</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Num &amp; w) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s != w.s) <span class="keyword">return</span> s &lt; w.s;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c != w.c) <span class="keyword">return</span> c &lt; w.c;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> d &lt; w.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Nums[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">0</span>;a * a &lt;= n;a ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> b = a;b * b + a * a &lt;= n;b ++)</span><br><span class="line">            Nums[m ++] = &#123;a * a + b * b,a,b&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(Nums,Nums + m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">0</span>;a * a &lt;= n;a ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> b = a;b * b + a * a &lt;= n;b ++)&#123;</span><br><span class="line">            <span class="type">int</span> t = n - a * a - b * b;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>,r = m - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(Nums[mid].s &gt;= t) r = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Nums[l].s == t)&#123;</span><br><span class="line">                cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Nums[l].c&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Nums[l].d&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1227-分巧克力"><a href="#1227-分巧克力" class="headerlink" title="1227. 分巧克力"></a>1227. 分巧克力</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230317/20230317_3.jpg" alt="分巧克力"></p><p>题目透露一个很重要的点:  我们只能去拆分方块.不能将方块拼起来.</p><p>所以我们就可以用O(n)时间<code>check</code>.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> h[N],w[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        ans += (h[i] / mid) * (w[i] / mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans &gt;= m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;h[i]&gt;&gt;w[i];</span><br><span class="line">        r = <span class="built_in">max</span>(h[i],r);</span><br><span class="line">        r = <span class="built_in">max</span>(w[i],r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="113-特殊排序"><a href="#113-特殊排序" class="headerlink" title="113. 特殊排序"></a>113. 特殊排序</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230317/20230317_4.jpg" alt="特殊排序"></p><p>一道交互题,通过这道题来说明下二分选择不同形成的结果不同.</p><p><strong>二分找 &lt;i 的最后一个位置r</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">specialSort</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= N;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>,r = res.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 找到最后一个 &lt; i的位置r</span></span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">compare</span>(res[mid],i)) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 尝试将i移动到r+1位置处.</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = res.<span class="built_in">size</span>() - <span class="number">2</span>;j &gt; r;j --) <span class="built_in">swap</span>(res[j],res[j + <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 特况: 如果 i&lt;res[r] 说明i是最小的元素</span></span><br><span class="line">            <span class="comment">// 此时 i 应该插入到结果数组res的第一个位置</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">compare</span>(i,res[r])) <span class="built_in">swap</span>(res[r],res[r + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>二分查找 &gt;i 的第一个位置r</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">specialSort</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= N;i ++)&#123;</span><br><span class="line">            <span class="comment">// 先放进来 占个位置</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>,r = res.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 二分找 &gt;i的第一个位置</span></span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">compare</span>(i,res[mid])) r = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将i放在r这个位置上</span></span><br><span class="line">            <span class="comment">// 此时特况: i为最大值, 正好放在最后,无需移动</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = res.<span class="built_in">size</span>() - <span class="number">2</span>;j &gt;= r;j --) <span class="built_in">swap</span>(res[j],res[j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以细细比较两种方式在细节上的不同.<br>怎么说呢,客观的来讲,两者之间没有任何复杂度的差距,只是特殊情况的不同.<br>在实战中,我们要尽量的避免过多考虑特殊情况.(<mark>百虑必有一失</mark>)</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第92场</title>
      <link href="/2023/03/15/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC92%E5%9C%BA/"/>
      <url>/2023/03/15/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC92%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>题目链接:<br><a href="https://www.acwing.com/problem/content/4867/">4864. 多边形</a><br><a href="https://www.acwing.com/problem/content/4868/">4865. 有效类型</a><br><a href="https://www.acwing.com/problem/content/4869/">4866. 最大数量</a></p></div><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="4864-多边形"><a href="#4864-多边形" class="headerlink" title="4864. 多边形"></a>4864. 多边形</h3><p>签到题.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x % <span class="number">4</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4865-有效类型"><a href="#4865-有效类型" class="headerlink" title="4865. 有效类型"></a>4865. 有效类型</h3><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230315/20230315_3.jpg" alt="有效类型"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing差分数组</title>
      <link href="/2023/03/15/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
      <url>/2023/03/15/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>差分数组:<br>  处理大量区间操作.</p><p>一维差分: <code>p[l] += c; p[r + 1] -= c</code>.</p><p>差分常常与前缀和配合使用.</p></div><h2 id="3729-改变数组元素"><a href="#3729-改变数组元素" class="headerlink" title="3729. 改变数组元素"></a>3729. 改变数组元素</h2><p>典型的差分数组应用.</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230315/20230315_1.jpg" alt="改变数组元素"></p><p><u>和前缀和一样,必须计算好下标</u></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    s[l] += <span class="number">1</span>;</span><br><span class="line">    s[r + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,n,x;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span> s);</span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= i)&#123;</span><br><span class="line">                <span class="built_in">insert</span>(<span class="number">1</span>,i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">insert</span>(i - x + <span class="number">1</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出答案</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(s[i]) cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="100-增减序列"><a href="#100-增减序列" class="headerlink" title="100. 增减序列"></a>100. 增减序列</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230315/20230315_2.jpg" alt="增减序列"></p><div class="note info no-icon flat"><p>非常好的一道题, 对差分数组的考察很透彻!!</p></div><p>分析:<br>看完题目后,很容易想到用差分来写.(差分就是来写这种区间上操作)<br>众所周知:<br>题目要求的操作等价于 在差分数组中选择两位,一位+1,另一位-1.<br>题目操作结果所有数据相等,而这样序列的差分数组在<code>2~n</code>上全为零.<br>题目要求每次只操作一下,计算差分数组中正数和,负数绝对值和,二者最大数就是操作次数.<br>题目要求求出结果种数,在差分视角下即最终1号位上变化的次数.<br>这里不得不提一下第<code>n + 1</code>位.<br>因为差分插入时有一步操作为<code>s[r + 1] -= c</code>.<br>所以在选择操作两位上我们可以选择:<br>两位都是在[2~n]中(优先)<br>一位是1,另一位在[2~n].<br>或者一位是n+1,另一位在[2~n]中.<br>因此种数为 正数和与负数和的差 + 1.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,ll c)</span></span>&#123;</span><br><span class="line">    s[l] += c;</span><br><span class="line">    s[r + <span class="number">1</span>] -= c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        <span class="built_in">insert</span>(i,i,t);</span><br><span class="line">    &#125;</span><br><span class="line">    ll fu = <span class="number">0</span>,ze = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] &lt; <span class="number">0</span>) fu += -s[i];</span><br><span class="line">        <span class="keyword">else</span> ze += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">max</span>(fu,ze)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">abs</span>(fu - ze) + <span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing前缀和</title>
      <link href="/2023/03/14/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2023/03/14/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E8%93%9DWeek1/Acwing%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>前缀和:<br>    处理区间和使用,非常的好用.<br>一维前缀和: <code>p[l ~r] = p[r] - p[l - 1]</code>.</p></div><h2 id="3956-截断数组"><a href="#3956-截断数组" class="headerlink" title="3956. 截断数组"></a>3956. 截断数组</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230314/20230314_3.jpg" alt="截断数组"></p><p>非常有意思的一道题.</p><p>怎么求三等分点?甚至只通过一次遍历找到所有三等分点的方案.<br>这道题完美的体现.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;=n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt; x;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] + x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判定能否三等分</span></span><br><span class="line">    <span class="keyword">if</span>(p[n] %  <span class="number">3</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//所有数的总和</span></span><br><span class="line">    <span class="type">int</span> sum = p[n];</span><br><span class="line">    <span class="comment">// 方案数需要ll</span></span><br><span class="line">    ll cnt = <span class="number">0</span>,res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历求第二个三等分点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt; n;i ++)&#123;</span><br><span class="line">        <span class="comment">// 判定是否是第一个三等分点</span></span><br><span class="line">        <span class="keyword">if</span>(p[i - <span class="number">1</span>] == sum / <span class="number">3</span>) cnt ++;</span><br><span class="line">        <span class="keyword">if</span>(p[i] == sum / <span class="number">3</span> * <span class="number">2</span>) res += cnt; </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1230-K倍区间"><a href="#1230-K倍区间" class="headerlink" title="1230. K倍区间"></a>1230. K倍区间</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230314/20230314_4.jpg" alt="K倍区间"></p><p>非常好的一道题.</p><p>如何在一次遍历中完成全部计数,同时能做到不重不漏?</p><p>这里有题目得到一个非常重要的结论: <mark>只有 <code>前缀和%k 相等</code>的i,j是之间区间和为k倍区间</mark>.<br>因此,我们可以在处理成前缀和时,同时将%k操作也处理下.<br>之后可以用公式求计数个数,也可以像我这样模拟计数过程.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll p[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        cin&gt;&gt; x;</span><br><span class="line">        <span class="comment">// 前缀和</span></span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] + x;</span><br><span class="line">        <span class="comment">// %k操作</span></span><br><span class="line">        x = p[i] % k;</span><br><span class="line">        <span class="comment">// 计数</span></span><br><span class="line">        <span class="keyword">if</span>(cnt[x]) res += cnt[x];</span><br><span class="line">        cnt[x] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不要忘记 %k = 0的全部都独自满足条件</span></span><br><span class="line">    res += cnt[<span class="number">0</span>];</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="99-激光炸弹"><a href="#99-激光炸弹" class="headerlink" title="99. 激光炸弹"></a>99. 激光炸弹</h2><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230314/20230314_5.jpg" alt="激光炸弹"></p><div class="note info no-icon flat"><p>这题数据范围非常的恶心.<br>但思路简单.就是前缀和</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> p[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    m = <span class="built_in">min</span>(m,<span class="number">5001</span>);</span><br><span class="line">    <span class="type">int</span> x,y,w;</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">        p[++x][++y] += w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5001</span>;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">5001</span>;j ++)</span><br><span class="line">            p[i][j] += p[i - <span class="number">1</span>][j] + p[i][j - <span class="number">1</span>] - p[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = m;i &lt;= <span class="number">5001</span>;i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m;j &lt;= <span class="number">5001</span>;j ++)&#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res,p[i][j] - p[i - m][j] - p[i][j - m] + p[i - m][j - m]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里为了防止陷入边界情况,++x,++y</strong>.<br><div class="note success no-icon flat"><p>根据数据范围,矩阵最大为<code>5001 * 5001</code>.<br>但打击范围R可以到<code>10^9</code>.因此必须判断R是否大于5001.</p></div></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第93场</title>
      <link href="/2023/03/14/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC93%E5%9C%BA/"/>
      <url>/2023/03/14/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC93%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>题目链接:<br><a href="https://www.acwing.com/problem/content/4870/">4867. 整除数</a><br><a href="https://www.acwing.com/problem/content/4871/">4868. 数字替换</a><br><a href="https://www.acwing.com/problem/content/4872/">4869. 异或值</a></p></div><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="4867-整除数"><a href="#4867-整除数" class="headerlink" title="4867. 整除数"></a>4867. 整除数</h3><p>签到题吗? 确实</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> k = n / m;</span><br><span class="line">    cout&lt;&lt; (k + <span class="number">1</span>) * m&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时候不需要想的那么复杂.</p><h3 id="4868-数字替换"><a href="#4868-数字替换" class="headerlink" title="4868. 数字替换"></a>4868. 数字替换</h3><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230314/20230314_1.jpg" alt="数字替换"></p><p>思路上: 第一感觉上,每次乘以最大的位数即可.但直接打脸.<br>比如<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">43 3 =&gt; 129 9 =&gt; 1161 6 =&gt; 6966</span><br><span class="line">43 4 =&gt; 172 7 =&gt; 1204 4 =&gt; 4816</span><br></pre></td></tr></table></figure><br><mark>每次只乘最大的数,可能会出现结果都是很小的数字组成.</mark></p><p>当然这道题,y总很善良的给了一个样例提醒我们.</p><p>然后,第二感觉上是使用<code>bfs</code>.<br>怎么说呢,使用了很多辅助函数,导致顺利通过了这道题.</p><h4 id="bfs-to-string-stoll"><a href="#bfs-to-string-stoll" class="headerlink" title="bfs + to_string + stoll"></a>bfs + to_string + stoll</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;ll&gt; q;</span><br><span class="line">    unordered_map&lt;ll,<span class="type">int</span>&gt; d;</span><br><span class="line">    q.<span class="built_in">push</span>(m);</span><br><span class="line">    d[m] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        string s = <span class="built_in">to_string</span>(t);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> d[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; x : s)&#123;</span><br><span class="line">            ll num = t * (x - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!d.<span class="built_in">count</span>(num))&#123;</span><br><span class="line">                d[num] = d[t] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时间:    765 ms</p><p><mark>后来发现,还是自己手写的更快一点</mark></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;ll&gt; q;</span><br><span class="line">    unordered_map&lt;ll,<span class="type">int</span>&gt; d;</span><br><span class="line">    q.<span class="built_in">push</span>(m);</span><br><span class="line">    d[m] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        ll t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 手动获取每一位</span></span><br><span class="line">        <span class="type">bool</span> st[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        ll y = t;</span><br><span class="line">        <span class="keyword">while</span>(y)&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            st[y % <span class="number">10</span>] = <span class="literal">true</span>;</span><br><span class="line">            y /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判定</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == n) <span class="keyword">return</span> d[t];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 优化查询</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">9</span>;i &gt; <span class="number">1</span>;i --)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st[i])&#123;</span><br><span class="line">                y = t * i;</span><br><span class="line">                <span class="keyword">if</span>(!d.<span class="built_in">count</span>(y))&#123;</span><br><span class="line">                    d[y] = d[t] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时间:    403 ms</p><p>本来我以为已经够快了.直到看到了y总的写法???!!!<br>真是惊为天人.</p><h4 id="dfs-最优化剪枝"><a href="#dfs-最优化剪枝" class="headerlink" title="dfs + 最优化剪枝"></a>dfs + 最优化剪枝</h4><p>dfs的最大方便的地方就是它非常方便的进行剪枝.(y总推荐).</p><p><strong>减枝策略</strong>:<br>1: 当前步数如果超过最优解. 直接剪.<br>2: 从当前步到最优解每次都乘10也未能达到要求, 直接剪.(未使用)</p><p><strong>优化搜索</strong>:</p><p>使用从大到小枚举. 有更大的概率接近最优解.</p><p>y总代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll x;</span><br><span class="line"><span class="type">int</span> res = INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll x,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> st[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    ll y = x;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        cnt ++;</span><br><span class="line">        st[y % <span class="number">10</span>] = <span class="literal">true</span>;</span><br><span class="line">        y /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 剪枝</span></span><br><span class="line">    <span class="keyword">if</span>(d + n - cnt &gt;= res) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == n)&#123;</span><br><span class="line">        res = d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">9</span>;i &gt; <span class="number">1</span>;i --)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i])&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x * i,d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">    <span class="built_in">dfs</span>(x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(res == INF) res = <span class="number">-1</span>;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行时间: 46 ms !!!!</p><p>还有一点:<a href="https://www.acwing.com/solution/content/173853/">这位大佬列出了各种用来优化的方法</a>.<br>但优化的太过了,运行时间又上去了.</p><h3 id="4869-异或值"><a href="#4869-异或值" class="headerlink" title="4869. 异或值"></a>4869. 异或值</h3><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230314/20230314_2.jpg" alt="异或值"></p><p>看完题目后,感觉上是要用Trie.不过这个东西太遥远了.忘记了!!!!</p><p><strong>基本上是Trie的模板题</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tr[N][<span class="number">2</span>],idx;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造trie树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">29</span>;~i;i --)&#123;</span><br><span class="line">        <span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tr[p][u]) tr[p][u] = ++ idx;</span><br><span class="line">        p = tr[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p 节点 k 位数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = k;~i;i--)&#123;</span><br><span class="line">        <span class="comment">// 0 1都存在 最小值在该位上必为1 </span></span><br><span class="line">        <span class="keyword">if</span>(tr[p][<span class="number">1</span>] &amp;&amp; tr[p][<span class="number">0</span>])&#123;</span><br><span class="line">            res += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            <span class="comment">// 找下一位结果最小值</span></span><br><span class="line">            res += <span class="built_in">min</span>(<span class="built_in">query</span>(tr[p][<span class="number">0</span>],i- <span class="number">1</span>),<span class="built_in">query</span>(tr[p][<span class="number">1</span>],i - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只存在一个 最小值在该位必是0</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[p][<span class="number">1</span>]) p = tr[p][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> p = tr[p][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="built_in">insert</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">query</span>(<span class="number">0</span>,<span class="number">29</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>y总代码:<br>更有是为这道题设计的意味.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3000010</span>, INF = <span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tr[N][<span class="number">2</span>], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tr[p][u]) tr[p][u] = ++ idx;</span><br><span class="line">        p = tr[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> f[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = tr[u][i];</span><br><span class="line">        <span class="keyword">if</span> (p) f[i] = <span class="built_in">dfs</span>(p, d - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> f[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (f[j] != <span class="number">-1</span>)</span><br><span class="line">                t = <span class="built_in">max</span>(t, f[j] + ((i ^ j) &lt;&lt; d));</span><br><span class="line">        res = <span class="built_in">min</span>(res, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="built_in">insert</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">29</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题目录</title>
      <link href="/2023/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E7%9B%AE%E5%BD%95/"/>
      <url>/2023/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>归纳下各个网址下写过的每日一题.</p></div><h2 id="Acwing下"><a href="#Acwing下" class="headerlink" title="Acwing下"></a>Acwing下</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing第94场</title>
      <link href="/2023/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC94%E5%9C%BA/"/>
      <url>/2023/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC94%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>题目链接:<br><a href="https://www.acwing.com/activity/content/problem/content/8146/">AcWing 4870. 装物品</a><br><a href="https://www.acwing.com/activity/content/problem/content/8147/">AcWing 4871. 最早时刻</a><br><a href="https://www.acwing.com/activity/content/problem/content/8148/">AcWing 4872. 最短路之和</a></p></div><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="4870-装物品"><a href="#4870-装物品" class="headerlink" title="4870. 装物品"></a>4870. 装物品</h3><p>签到题:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">5</span>)&#123;</span><br><span class="line">        cout&lt;&lt;n / <span class="number">5</span> + <span class="number">1</span> &lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> cout&lt;&lt;n / <span class="number">5</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>还有一种更快的写法: <code>(n + 4) / 5</code>.</p><h3 id="4871-最早时刻"><a href="#4871-最早时刻" class="headerlink" title="4871. 最早时刻"></a>4871. 最早时刻</h3><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230313/20230313_1.jpg" alt="最早时刻"></p><div class="note success no-icon flat"><p>很容易辨别出,这道题是 单源最短路的变种.<br>由于没有负边,等待时间也不可能为负, 所以可以使用<code>dijkstra</code>或<code>spfa</code>算法.<br>不过y总说: <code>10^5</code>很可能会卡spfa.</p></div><h4 id="dijkstra解法"><a href="#dijkstra解法" class="headerlink" title="dijkstra解法"></a>dijkstra解法</h4><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,M = <span class="number">2</span> * N,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; stop[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; p;</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    p.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!p.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> t = p.<span class="built_in">top</span>();</span><br><span class="line">        p.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> var = t.second;</span><br><span class="line">        <span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line">        st[var] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> d_var = d[var];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = stop[var].<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d_var == stop[var][i]) d_var ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stop[var][i] &gt; d_var) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[var];i != <span class="number">-1</span>;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; d_var + w[i])&#123;</span><br><span class="line">                d[j] = d_var + w[i];</span><br><span class="line">                p.<span class="built_in">push</span>(&#123;d[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[n] ==  INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> d[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t,x;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; t;j ++)&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            stop[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="built_in">dijkstra</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><div class="note info no-icon flat"><p>dijkstra特点:<br>每次只更新一点,每点只更新一次.<br>原理: 贪心.每次只用未确定最短路中最近的一点进行更新.</p><p><mark>dijkstra是站在 <strong>点</strong> 的角度求最短路 </mark></p></div></p><p>关于 停顿时间求解 的误区:<br>写法1:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新未更新的点</span></span><br><span class="line"><span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line">st[var] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 停顿时间求解</span></span><br><span class="line"><span class="type">int</span> d_var = d[var];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = stop[var].<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(d_var == stop[var][i]) d_var ++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(stop[var][i] &gt; d_var) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果不这样写,则需要这样写.<br>写法2:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(st[var]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(var == n) <span class="keyword">break</span>;</span><br><span class="line">st[var] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = stop[var].<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(d[var] == stop[var][i]) d[var] ++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(stop[var][i] &gt; d[var]) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>典型数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">1 2 3</span><br><span class="line">0</span><br><span class="line">1 3</span><br><span class="line">答案: 3</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>很容易可以对比出来: <font color=red>要么用新变量<code>d_var</code>更新.要么特判第n点不要有等待时间</font>.</p><p>同时,这部分也可以通过二分优化.不过由于数量很少,这里就不做对应的优化了!</p><h4 id="spfa解法"><a href="#spfa解法" class="headerlink" title="spfa解法"></a>spfa解法</h4><p>思路基本相同.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,M = <span class="number">2</span> * N,INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],e[M],w[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; stop[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,INF,<span class="keyword">sizeof</span> d);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 入队标记</span></span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 出队标记</span></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求停顿时间</span></span><br><span class="line">        <span class="type">int</span> t_dist = d[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,len = stop[t].<span class="built_in">size</span>();i &lt; len;i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t_dist == stop[t][i]) t_dist ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stop[t][i] &gt; t_dist) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t];i != <span class="number">-1</span>;i = ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j] &gt; t_dist + w[i])&#123;</span><br><span class="line">                d[j] = t_dist + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[n] == INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> d[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">        <span class="type">int</span> t,x;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; t;j ++)&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            stop[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="built_in">spfa</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>spfa特点:<br>spfa是从Bellman_fold队列优化而来的,不过spfa不能处理有负环的图.<br>spfa常常用来判断图中是否有负环.</p><p><mark>spfa是站在 <strong>边</strong> 的角度求解最短路</mark></p></div><p>关于 停顿时间求解 的误区:</p><p>如果使用spfa,则我们不能通过 指定某个点不更新的方式 来求停顿时间.<br>只能使用新变量保存的方式 来求停顿时间.<br>原因: spfa是面向边的. 因此spfa求解过程中,点可能多次入队.</p><p>典型的数据:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">4 6</span><br><span class="line">1 2 2</span><br><span class="line">1 3 3</span><br><span class="line">1 4 8</span><br><span class="line">2 3 4</span><br><span class="line">2 4 5</span><br><span class="line">3 4 3</span><br><span class="line">0</span><br><span class="line">1 3</span><br><span class="line">2 3 4</span><br><span class="line">0</span><br><span class="line">答案: 7</span><br></pre></td></tr></table></figure></p><h3 id="4872-最短路之和"><a href="#4872-最短路之和" class="headerlink" title="4872. 最短路之和"></a>4872. 最短路之和</h3><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230313/20230313_2.jpg" alt="4872. 最短路之和"></p><div class="note success no-icon flat"><p>不难从题目描述中得知:<br>本题使用Floyd 算法.Floyd是当前学到的唯一一个可以解决多源最短路问题的算法.</p></div><p>这道题如果从正面解,不仅每次删除数据很麻烦,还需要多次调动Floyd算法.<br>非常的费时间,同时也容易出错.<br><wavy>但如果我们反过来考虑: 每次加入一个点呢</wavy>.</p><div class="note info no-icon flat"><p>如果每次多加一个点.<br>在Floyd算法的推导过程中知道:<br><code>dp[k][i][j]</code>表示从 i 到 j 只经过 不超过 k的点 的最短路</p><p>完美的契合Floyd的推导. </p></div><p>代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line">ll d[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> x[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            cin&gt;&gt;d[i][j];</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cin&gt;&gt;x[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// floyd的变种</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> u = n;u;u --)&#123;</span><br><span class="line">        <span class="type">int</span> k = x[u];</span><br><span class="line">        st[k] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j],d[i][k] + d[k][j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st[i] &amp;&amp; st[j])&#123;</span><br><span class="line">                    ans[u] += d[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><div class="note success no-icon flat"><p>这道题可以看作为 脑筋急转弯.<br>同时需要对 floyd算法 的推导过程熟悉掌握.</p></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开个新坑</title>
      <link href="/2023/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/%E5%BC%80%E4%B8%AA%E6%96%B0%E5%9D%91%E5%86%99%E5%91%A8%E8%B5%9B/"/>
      <url>/2023/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/%E5%BC%80%E4%B8%AA%E6%96%B0%E5%9D%91%E5%86%99%E5%91%A8%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>开始写周赛了,这里放个总目录吧!</p></div><h2 id="Acwing部分"><a href="#Acwing部分" class="headerlink" title="Acwing部分"></a>Acwing部分</h2><p><a href="https://qvq-ovo.github.io/2023/03/13/%E7%AE%97%E6%B3%95%E9%A2%98%E5%BA%93/Acwing%E5%91%A8%E8%B5%9B/Acwing%E7%AC%AC94%E5%9C%BA/">Acwing第94场</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用selenium爬取自习时间</title>
      <link href="/2023/03/06/%E8%87%AA%E5%8A%A8%E5%8C%96/python%E4%BD%BF%E7%94%A8selenium%E7%88%AC%E5%8F%96%E8%87%AA%E4%B9%A0%E6%97%B6%E9%97%B4/"/>
      <url>/2023/03/06/%E8%87%AA%E5%8A%A8%E5%8C%96/python%E4%BD%BF%E7%94%A8selenium%E7%88%AC%E5%8F%96%E8%87%AA%E4%B9%A0%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>学校更新了自习系统,新的自习系统没有学习时间自动统计功能.<br>不过网站上登录后可以获取每次自习时间上的细节.<br>所以,使用selenium爬取对应数据,自己在本地实现统计.嘻嘻</p></div><h2 id="selenium模拟浏览器操作"><a href="#selenium模拟浏览器操作" class="headerlink" title="selenium模拟浏览器操作"></a>selenium模拟浏览器操作</h2><div class="note info no-icon flat"><p>本来打算使用<code>requests</code>来爬取的,奈何本人太废.根本分析不过来.<br>不得不说,selenium是真的强.</p></div><h3 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h3><p>python:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><br>必须给本地浏览器安装对应的驱动器:</p><p>1: 谷歌浏览器驱动: <a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br>2: 火狐浏览器驱动: <a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></p><p><u>记得下载对应的版本,至少是能相互兼容的.</u></p><h3 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h3><p>使用<code>selenium</code>模拟用户操作,真的是直接模仿用户操作.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录网址</span></span><br><span class="line">first_url = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line"><span class="comment"># 数据所在页面</span></span><br><span class="line">target_url = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">user = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">password = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录网站</span></span><br><span class="line">browser.get(first_url)</span><br><span class="line"><span class="comment">#  等待</span></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟登录</span></span><br><span class="line">browser.find_element(By.ID,<span class="string">&quot;username&quot;</span>).send_keys(user)</span><br><span class="line">browser.find_element(By.ID,<span class="string">&quot;password&quot;</span>).send_keys(password)</span><br><span class="line">browser.find_element(By.ID,<span class="string">&quot;login_submit&quot;</span>).click()</span><br><span class="line"><span class="comment">#  等待</span></span><br><span class="line">time.sleep(<span class="number">2.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否登录成功</span></span><br><span class="line">element_existance = <span class="literal">True</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.find_element(By.XPATH,<span class="string">&quot;//div[@role=&#x27;tab&#x27; and @class=&#x27;van-tabbar-item&#x27;]&quot;</span>).click()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    element_existance = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> element_existance == <span class="literal">False</span> :</span><br><span class="line">    browser.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>注意:<br>代码中类似于<code>By.ID</code>,<code>By.XPATH</code>用于定位操作元素.<br>如果网页更新或更换不同的网址,都需要重新配置.</p></div><h3 id="通过日志获取数据"><a href="#通过日志获取数据" class="headerlink" title="通过日志获取数据"></a>通过日志获取数据</h3><div class="note info no-icon flat"><p>想要更简单有效的获取数据,单单模拟点击之类肯定是不够用的.<br>必须要拿到关键的xhr包.</p></div><p>这一步网上有很多操作方法.<br>我选择这一种: <a href="https://blog.csdn.net/weixin_45081575/article/details/126551260">【Selenium】Selenium获取Network数据（高级版）</a></p><p>写的是真的好,我现在也没时间优化它.</p><p>开启对应配置:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">caps = &#123;</span><br><span class="line">    <span class="string">&quot;browserName&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;goog:loggingPrefs&#x27;</span>: &#123;<span class="string">&#x27;performance&#x27;</span>: <span class="string">&#x27;ALL&#x27;</span>&#125;  <span class="comment"># 开启日志性能监听</span></span><br><span class="line">&#125;</span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment"># 开启无头模式</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动浏览器</span></span><br><span class="line">browser = webdriver.Chrome(desired_capabilities=caps,options=chrome_options)</span><br><span class="line"><span class="comment"># 访问url</span></span><br><span class="line">browser.get(first_url)</span><br></pre></td></tr></table></figure><br><div class="note success no-icon flat"><p>无头浏览器: 不显示窗口.直接在内存中处理浏览数据.</p></div></p><p>有了日志监听,很容易就能定位我要访问的网址返回的数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 过滤资源</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_type</span>(<span class="params">_<span class="built_in">type</span>: <span class="built_in">str</span></span>):</span><br><span class="line">    types = [</span><br><span class="line">        <span class="string">&#x27;application/javascript&#x27;</span>, <span class="string">&#x27;application/x-javascript&#x27;</span>, <span class="string">&#x27;text/css&#x27;</span>, <span class="string">&#x27;webp&#x27;</span>, <span class="string">&#x27;image/png&#x27;</span>, <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;image/jpeg&#x27;</span>, <span class="string">&#x27;image/x-icon&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">if</span> _<span class="built_in">type</span> <span class="keyword">not</span> <span class="keyword">in</span> types:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取名称为 performance 的日志</span></span><br><span class="line">performance_log = browser.get_log(<span class="string">&#x27;performance&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet <span class="keyword">in</span> performance_log:</span><br><span class="line">    message = json.loads(packet.get(<span class="string">&#x27;message&#x27;</span>)).get(<span class="string">&#x27;message&#x27;</span>)  <span class="comment"># 获取message的数据</span></span><br><span class="line">    <span class="keyword">if</span> message.get(<span class="string">&#x27;method&#x27;</span>) != <span class="string">&#x27;Network.responseReceived&#x27;</span>:  <span class="comment"># 如果method 不是 responseReceived 类型就不往下执行</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    packet_type = message.get(<span class="string">&#x27;params&#x27;</span>).get(<span class="string">&#x27;response&#x27;</span>).get(<span class="string">&#x27;mimeType&#x27;</span>)  <span class="comment"># 获取该请求返回的type</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> filter_type(_<span class="built_in">type</span>=packet_type):  <span class="comment"># 过滤type</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    requestId = message.get(<span class="string">&#x27;params&#x27;</span>).get(<span class="string">&#x27;requestId&#x27;</span>)  <span class="comment"># 唯一的请求标识符。相当于该请求的身份证</span></span><br><span class="line">    url = message.get(<span class="string">&#x27;params&#x27;</span>).get(<span class="string">&#x27;response&#x27;</span>).get(<span class="string">&#x27;url&#x27;</span>)  <span class="comment"># 获取 该请求  url</span></span><br><span class="line">    <span class="comment"># 判断是否是我们想要的</span></span><br><span class="line">    <span class="keyword">if</span> url == target_url :</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># selenium调用 cdp</span></span><br><span class="line">            resp = browser.execute_cdp_cmd(<span class="string">&#x27;Network.getResponseBody&#x27;</span>, &#123;<span class="string">&#x27;requestId&#x27;</span>: requestId&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;type: <span class="subst">&#123;packet_type&#125;</span> url: <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;resp[<span class="string">&quot;body&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 这里可以编写处理数据代码</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> WebDriverException:  <span class="comment"># 忽略异常</span></span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="其他操作-保存与自动化"><a href="#其他操作-保存与自动化" class="headerlink" title="其他操作: 保存与自动化"></a>其他操作: 保存与自动化</h2><h3 id="数据的保存"><a href="#数据的保存" class="headerlink" title="数据的保存"></a>数据的保存</h3><p>因为需要获取: 当天日期, 每天自习时长.<br>所以这里选择保存为<code>csv</code>文件格式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存信息 csv</span></span><br><span class="line">csv_file = <span class="built_in">open</span>(<span class="string">&#x27;./Alldata.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">writer = csv.writer(csv_file)</span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">writer.writerow([<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;使用时间&#x27;</span>])</span><br></pre></td></tr></table></figure><p>剩下的只需要把<code>print(...)</code>换成<code>writer.writerow([..,..])</code>.</p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>欸,没准我可以将这些部署在服务器上,全部自动化操作.<br>下次再试,可能需要配合前面的 <strong>spring项目整合</strong> .</p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合</title>
      <link href="/2023/01/25/SSM%E5%AD%A6%E4%B9%A0/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
      <url>/2023/01/25/SSM%E5%AD%A6%E4%B9%A0/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>虽然零零散散的学了些SSM相干的知识,但过了太久也忘得差不多了.<br>这里再跟着狂神学习下SSM整合框架的基本搭建流程.<br>同时实现项目一些简单操作.</p><p>参考资料:<br><a href="https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng">狂神说SpringMVC05：整合SSM框架</a><br><a href="https://www.bilibili.com/video/BV1RE41127rv?p=1">狂神说Java SSM框架最新整合教学IDEA版</a></p><p>相关环境:</p><ul><li>IDEA2021.2.1</li><li>MySQL8.0+</li><li>Tomcat9.0</li><li>Maven3.8</li><li>Jdk8</li></ul></div><h2 id="一-i搭建项目数据库"><a href="#一-i搭建项目数据库" class="headerlink" title="一. i搭建项目数据库"></a>一. i搭建项目数据库</h2><p>本项目创建一个存放书籍信息的书籍库:</p><p>创建数据表+插入信息:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `ssmbuild`;</span><br><span class="line"></span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `books`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books` (</span><br><span class="line">`bookID` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">`bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">`bookCounts` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">`detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="二-idea搭建基本环境"><a href="#二-idea搭建基本环境" class="headerlink" title="二. idea搭建基本环境"></a>二. idea搭建基本环境</h2><p>首先搭建Maven空项目<br><div class="note success no-icon flat"><p>Maven中有很多项目骨架.<br>选择后可以直接生成项目框架.<br>这里为了学习,选择从空项目搭建.</p></div></p><p>项目名:<code>BookProject</code></p><h3 id="2-1-配置pom-xml"><a href="#2-1-配置pom-xml" class="headerlink" title="2.1 配置pom.xml"></a>2.1 配置pom.xml</h3><p>配置项目所需要的依赖包和解决静态资源导出问题.</p><p>依赖配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池: c3p0很老了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置静态资源导出解决办法:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态资源导出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用Maven就是方便导包,同时也方便看清楚包之间的关系:</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_1.jpg" alt="jar包关系图" style="zoom:80%;" /></p><h3 id="2-2-创建包和配置xml文件"><a href="#2-2-创建包和配置xml文件" class="headerlink" title="2.2 创建包和配置xml文件"></a>2.2 创建包和配置xml文件</h3><p>创建成功后项目结构:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_2.jpg" alt="jar包关系图" style="zoom:60%;" /></p><p>applicationContext.xml配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>mybatis-config.xml配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><div class="note success no-icon flat"><p>两个基本模板:<br>applicationContext.xml基本模板<br>mybatis-config.xml基本模板<br>(写这个方便检索)</p></div></p><h2 id="三-Mybatis整合配置"><a href="#三-Mybatis整合配置" class="headerlink" title="三. Mybatis整合配置"></a>三. Mybatis整合配置</h2><p>对应视频1: 整合Mybatis层</p><h3 id="3-1-配置数据库连接文件"><a href="#3-1-配置数据库连接文件" class="headerlink" title="3.1 配置数据库连接文件"></a>3.1 配置数据库连接文件</h3><p>文件名: <code>database.properties</code><br>内容:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=1123@.com</span><br></pre></td></tr></table></figure><br>这里我使用的MySQL8.0+,所以jdbc.url必须配置时区.</p><h3 id="3-2-idea导入Lombok"><a href="#3-2-idea导入Lombok" class="headerlink" title="3.2 idea导入Lombok"></a>3.2 idea导入Lombok</h3><p><strong>Lombok作用</strong>: 通过简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具.<br>简单来说:<br>当我们新建了一个类,然后在其中写了几个字段,通常情况下我们需要手动去建立getter和setter方法,构造函数啊之类的.<br>而lombok的作用就是为了省去我们手动创建这些代码的麻烦,它能够在我们编译源码的时候自动帮我们生成这些方法.</p><p><strong>导入过程:</strong><br>不仅需要<u>项目中导入Lombok依赖</u>,<u>idea也需要安装Lombok插件</u>.</p><p>项目导入Lombok依赖:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-3-编写pojo类"><a href="#3-3-编写pojo类" class="headerlink" title="3.3 编写pojo类"></a>3.3 编写pojo类</h3><p>有了Lombok的支持,pojo类可以摆脱臃肿的类方法:</p><p>Books类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Books</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>添加完三个Lombok的注释后,可以在Structure(idea左下角)看到添加的方法:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_3.jpg" alt="未加载图片" style="zoom:80%;" /></p><div class="note success no-icon flat"><p><strong>Lombok关于javaBean常用注解</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">// ToString,get/set...方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 无参构造</span></span><br></pre></td></tr></table></figure><br>网上可以搜索到更多其他方法.</p></div><h3 id="3-4-编写dao层接口-xml配置"><a href="#3-4-编写dao层接口-xml配置" class="headerlink" title="3.4 编写dao层接口 + xml配置"></a>3.4 编写dao层接口 + xml配置</h3><p>dao层一般只提供对pojo的基本操作: 增删改查.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增</span></span><br><span class="line">    <span class="comment">// 添加一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删</span></span><br><span class="line">    <span class="comment">// 删除一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改</span></span><br><span class="line">    <span class="comment">// 更新一本书</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBookById</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查</span></span><br><span class="line">    <span class="comment">// 查询一本书</span></span><br><span class="line">    Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有书</span></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在dao包下编写对应的xml配置文件.</p><p>BookMapper接口对应的<code>BookMapper.xml</code>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.li.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books (bookName, bookCounts, detail)</span><br><span class="line">        values (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--删--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from ssmbuild.books where bookID = #&#123;bookId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--改--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--更新一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;, bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125;</span><br><span class="line">        where bookID=#&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询一本书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books where bookID=#&#123;bookId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询所有书--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里由于<code>BookMapper.xml</code>中参数和<code>BookMapper</code>中不一致.所以对<code>BookMapper</code>中参数添加注释:<br>主要就是这两个.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删</span></span><br><span class="line"><span class="comment">// 删除一本书</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delBookById</span><span class="params">(<span class="meta">@Param(&quot;bookId&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="comment">// 查询一本书</span></span><br><span class="line">Books <span class="title function_">queryBookById</span><span class="params">(<span class="meta">@Param(&quot;bookId&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></p><p>同时,<code>BookMapper.xml</code>中使用的是<code>Books</code>的别名,我们在Mybatis的主配置文件中添加相关支持:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.li.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><br><div class="note info no-icon flat"><p>如果不配置别名,那么在<code>BookMapper.xml</code>中需要将所有的<code>resultType=&quot;Books&quot;</code>改为全路径名.</p></div></p><p>Mapper.xml基本模板和Mabatis-config.xml基本模板很相似.但这里我分开记忆!<br><strong>Mapper.xml基本模板:</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div class="note success no-icon flat"><p>不太重要的模板:<br>Mapper.xml基本模板</p></div><h3 id="3-5-service层接口-功能实现类"><a href="#3-5-service层接口-功能实现类" class="headerlink" title="3.5 service层接口 + 功能实现类"></a>3.5 service层接口 + 功能实现类</h3><p>service层使用dao层的方法进行组合形成暴露在外的功能.</p><p>我们这里只是学习就不编写复杂的功能,就简单的将dao层基本功能都实现下.</p><p><strong>接口</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增</span></span><br><span class="line">    <span class="comment">// 添加一本书</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">addBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删</span></span><br><span class="line">    <span class="comment">// 删除一本书</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改</span></span><br><span class="line">    <span class="comment">// 更新一本书</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateBookById</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查</span></span><br><span class="line">    <span class="comment">// 查询一本书</span></span><br><span class="line">    Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有书</span></span><br><span class="line">    List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><strong>功能实现类</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addBook</span><span class="params">(Books book)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>  bookMapper.addBook(book);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bookMapper.delBookById(id);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateBookById</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bookMapper.updateBookById(books);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><div class="note danger no-icon flat"><p>service层实现类<strong>易忘点</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service层调用deo层: 组合dao</span></span><br><span class="line"><span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"><span class="comment">// 用于set注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这一步,即方便之后项目的功能扩展,也使得当前项目功能多样化得到保证.</p></div><h2 id="四-Spring整合配置"><a href="#四-Spring整合配置" class="headerlink" title="四. Spring整合配置"></a>四. Spring整合配置</h2><p>spring用来管理dao层,service层.</p><h3 id="4-1-配置对dao层管理的xml文件"><a href="#4-1-配置对dao层管理的xml文件" class="headerlink" title="4.1 配置对dao层管理的xml文件"></a>4.1 配置对dao层管理的xml文件</h3><p>Spring对dao层管理<strong>操作步骤</strong>:</p><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>关联数据库文件</p>            </div><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>配置数据库连接池</p>            </div><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>配置SqlSessionFactory对象</p>            </div><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>配置扫描Dao接口包，动态实现Dao接口注入到spring容器中</p>            </div><p>文件名:<code>spring-dao.xml</code>.(方便区分)</p><div class="note success no-icon flat"><p>idea可以选择spring模板创建,不过要记得添加到applicationContext.xml主配置文件中进行关联.</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 关联数据库文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 配置连接池--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里我们配置c3p0数据池 (druid,hikari这两个池子是常用的)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有池子的公共操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--c3p0独有配置--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. sqlSessionFactory对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4. 配置dao接口扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.注入 sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.扫描 对应dao包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.li.dao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p><strong>连接池相关知识</strong>:<br>dbcp: 半自动化操作 不能自动连接<br>c3p0: 自动化操作(自动的加载配置文件 并且设置到对象里面)<br>druid,hikari 大公司用的</p></div><h3 id="4-2-配置对service层管理的xml文件"><a href="#4-2-配置对service层管理的xml文件" class="headerlink" title="4.2 配置对service层管理的xml文件"></a>4.2 配置对service层管理的xml文件</h3><div class='checkbox blue checked'><input type="radio" checked="checked"/>            <p>扫描service下的包</p>            </div><div class='checkbox blue checked'><input type="radio" checked="checked"/>            <p>将业务实现类注入到Spring容器(这里采用配置注入)</p>            </div><div class='checkbox blue checked'><input type="radio" checked="checked"/>            <p>声明式事务配置</p>            </div><div class='checkbox blue'><input type="radio" />            <p>开启aop事务支持</p>            </div><p>文件名: <code>spring-service.xml</code>.(方便区分)</p><p>同样也需要关联applicationContext.xml主配置.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 扫描service下的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.li.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 将业务类注入到Spring, 这里采用配置注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. 声明式事务配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceTransactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果单单这样配置是会爆红的:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_4.jpg" alt="未加载展示的内容" style="zoom:80%;" /></p><p>这是由于<code>spring-dao.xml</code>和<code>spring-service.xml</code>两者之间没有关联到一起.</p><p>这里使用主配置文件进行关联:</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_5.jpg" alt="主配置文件关联" style="zoom:80%;" /></p><p>如果不用主配置,可以采取注解的方法代替配置注入:</p><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_6.jpg" alt="注解关联" /></p><h2 id="五-SpringMVC整合配置"><a href="#五-SpringMVC整合配置" class="headerlink" title="五. SpringMVC整合配置"></a>五. SpringMVC整合配置</h2><p>SpringMVC是Spring中一个框架,用于解决WEB相关问题.</p><h3 id="5-1-添加web支持"><a href="#5-1-添加web支持" class="headerlink" title="5.1 添加web支持"></a>5.1 添加web支持</h3><p><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_8.jpg" alt="添加过程" style="zoom:80%;" /></p><p>添加后在根目录下多了个web文件夹,并标记为web.</p><div class="note info no-icon flat"><p><strong>不同创建区别:</strong><br>如果在建立Maven项目时,直接标记为web项目时,web文件夹是在src/main下与java同级.<br>而像这样建立空项目后标记为web项目,web文件夹是和src同级.</p></div><h3 id="5-2-springMVC配置的xml文件"><a href="#5-2-springMVC配置的xml文件" class="headerlink" title="5.2 springMVC配置的xml文件"></a>5.2 springMVC配置的xml文件</h3><p>文件名: <code>springMVC.xml</code></p><p>springMVC配置步骤:<br><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>注解驱动</p>            </div><br><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>静态资源过滤</p>            </div><br><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>扫描controller层</p>            </div><br><div class='checkbox cyan checked'><input type="radio" checked="checked"/>            <p>视图解析器</p>            </div></p><p>具体配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.扫描controller层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.li.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4.视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里同样要将<code>springMVC.xml</code>与之前的配置进行相关联.<br>采取主配置关联方式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">import</span> resource=<span class="string">&quot;classpath:springMVC.xml&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>至此,相关xml依赖已经写完了:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_7.jpg" alt="项目中依赖关系" style="zoom:80%;" /></p><h3 id="5-3-在web-xml中添加相关配置"><a href="#5-3-在web-xml中添加相关配置" class="headerlink" title="5.3 在web.xml中添加相关配置"></a>5.3 在web.xml中添加相关配置</h3><p>几个基本的配置:  DispatchServlet, 乱码过滤, Session.</p><p>配置情况:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DispatchServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--乱码过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Session--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-4-功能实现"><a href="#5-4-功能实现" class="headerlink" title="5.4 功能实现"></a>5.4 功能实现</h3><h2 id="六-i整合感想"><a href="#六-i整合感想" class="headerlink" title="六. i整合感想"></a>六. i整合感想</h2><p><strong><font color=#FF0000>该项目非常值得收藏起来</font></strong>.</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写脚本协助上传图片</title>
      <link href="/2023/01/15/%E8%87%AA%E5%8A%A8%E5%8C%96/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E5%8D%8F%E5%8A%A9%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2023/01/15/%E8%87%AA%E5%8A%A8%E5%8C%96/%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%E5%8D%8F%E5%8A%A9%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p><font size=4><b>前言📝</b></font><br>由于貌似PicGo不能兼容vs code,使用PicGo方法并没有太方便.(自我感觉)<br>因此,我想到使用bat命令来实现git提交功能.</p></div><h2 id="1-bat实现自动生成目录"><a href="#1-bat实现自动生成目录" class="headerlink" title="1. bat实现自动生成目录"></a>1. bat实现自动生成目录</h2><p>为了方便图片处理, 我会将当天的图片都放在同一个文件夹中, 而现在使用bat命令来实现该功能.</p><h3 id="1-1-基础功能"><a href="#1-1-基础功能" class="headerlink" title="1.1 基础功能"></a>1.1 基础功能</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">::关闭显示</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">::显示本地时间格式</span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%date%</span></span><br><span class="line">::周日 <span class="number">2023</span>/<span class="number">01</span>/<span class="number">15</span></span><br><span class="line"></span><br><span class="line">::dd=日期</span><br><span class="line"><span class="built_in">set</span> dd=<span class="variable">%date:~11,2%</span>  </span><br><span class="line">::mm=月份</span><br><span class="line"><span class="built_in">set</span> mm=<span class="variable">%date:~8,2%</span></span><br><span class="line">::yy=年份</span><br><span class="line"><span class="built_in">set</span> yy=<span class="variable">%date:~3,4%</span></span><br><span class="line">::folder=年月日</span><br><span class="line"><span class="built_in">set</span> folder=&quot;<span class="variable">%yy%</span><span class="variable">%mm%</span><span class="variable">%dd%</span>&quot;</span><br><span class="line"></span><br><span class="line">::创建文件夹</span><br><span class="line"><span class="built_in">md</span>  <span class="variable">%folder%</span></span><br><span class="line"></span><br><span class="line">::暂停，保持<span class="built_in">cmd</span>窗口，调试时方便信息查看，正常使用时可删除</span><br><span class="line">::<span class="built_in">pause</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-进一步偷懒"><a href="#1-2-进一步偷懒" class="headerlink" title="1.2 进一步偷懒"></a>1.2 进一步偷懒</h3><p>为了进一步方便图片重命名,可以进一步改造代码:新增保存信息至剪切板功能!<br>在上述代码后追加:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">::新增保存到剪切板</span><br><span class="line"><span class="built_in">cd</span> D:\Blog_my\blog_img\blogImg\img\<span class="variable">%folder%</span></span><br><span class="line"></span><br><span class="line">::读取当前文件夹的文件个数</span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b ^| <span class="built_in">find</span> /v /c &quot;&amp;#@&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">  <span class="built_in">set</span> count=<span class="variable">%%a</span></span><br><span class="line">)</span><br><span class="line">::个数加<span class="number">1</span></span><br><span class="line"><span class="built_in">set</span>/a count+=<span class="number">1</span></span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%count%</span></span><br><span class="line"></span><br><span class="line">::文件重命名格式</span><br><span class="line"><span class="built_in">set</span> file=&quot;<span class="variable">%yy%</span><span class="variable">%mm%</span><span class="variable">%dd%</span>_<span class="variable">%count%</span>&quot;</span><br><span class="line">::文件去除空格</span><br><span class="line"><span class="built_in">set</span> &quot;file=%file: =%&quot;</span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%file%</span></span><br><span class="line"></span><br><span class="line">:: 保存到剪切板中</span><br><span class="line"><span class="built_in">set</span>/p=<span class="variable">%file%</span>&lt;<span class="built_in">nul</span> | clip</span><br><span class="line"></span><br><span class="line">::暂停，保持<span class="built_in">cmd</span>窗口，调试时方便信息查看，正常使用时可删除</span><br><span class="line">::<span class="built_in">pause</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="1-3-全部代码和总结"><a href="#1-3-全部代码和总结" class="headerlink" title="1.3 全部代码和总结"></a>1.3 全部代码和总结</h3><p>全部代码:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">::关闭显示</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">::显示本地时间格式</span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%date%</span></span><br><span class="line">::周日 <span class="number">2023</span>/<span class="number">01</span>/<span class="number">15</span></span><br><span class="line"></span><br><span class="line">::dd=日期</span><br><span class="line"><span class="built_in">set</span> dd=<span class="variable">%date:~11,2%</span>  </span><br><span class="line">::mm=月份</span><br><span class="line"><span class="built_in">set</span> mm=<span class="variable">%date:~8,2%</span></span><br><span class="line">::yy=年份</span><br><span class="line"><span class="built_in">set</span> yy=<span class="variable">%date:~3,4%</span></span><br><span class="line">::folder=年月日</span><br><span class="line"><span class="built_in">set</span> folder=&quot;<span class="variable">%yy%</span><span class="variable">%mm%</span><span class="variable">%dd%</span>&quot;</span><br><span class="line"><span class="built_in">set</span> &quot;folder=%folder: =%&quot;</span><br><span class="line"></span><br><span class="line">::创建文件夹</span><br><span class="line"><span class="built_in">md</span>  <span class="variable">%folder%</span></span><br><span class="line"></span><br><span class="line">::新增保存到剪切板</span><br><span class="line"><span class="built_in">cd</span> D:\Blog_my\blog_img\blogImg\img\<span class="variable">%folder%</span></span><br><span class="line"></span><br><span class="line">::读取当前文件夹的文件个数</span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b ^| <span class="built_in">find</span> /v /c &quot;&amp;#@&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">  <span class="built_in">set</span> count=<span class="variable">%%a</span></span><br><span class="line">)</span><br><span class="line">::个数加<span class="number">1</span></span><br><span class="line"><span class="built_in">set</span>/a count+=<span class="number">1</span></span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%count%</span></span><br><span class="line"></span><br><span class="line">::文件重命名格式</span><br><span class="line"><span class="built_in">set</span> file=&quot;<span class="variable">%yy%</span><span class="variable">%mm%</span><span class="variable">%dd%</span>_<span class="variable">%count%</span>&quot;</span><br><span class="line">::文件去除空格</span><br><span class="line"><span class="built_in">set</span> &quot;file=%file: =%&quot;</span><br><span class="line">::<span class="built_in">echo</span> <span class="variable">%file%</span></span><br><span class="line"></span><br><span class="line">:: 保存到剪切板中</span><br><span class="line"><span class="built_in">set</span>/p=<span class="variable">%file%</span>&lt;<span class="built_in">nul</span> | clip</span><br><span class="line"></span><br><span class="line">::暂停，保持<span class="built_in">cmd</span>窗口，调试时方便信息查看，正常使用时可删除</span><br><span class="line">::<span class="built_in">pause</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>总结</strong>:<br>不同电脑中时间格式有所不同,需要自己微调一下.</p><p>相关链接:<br><a href="https://blog.csdn.net/weixin_42985452/article/details/113789487">Windows批处理(cmd/bat)快速新建文件夹</a>.<br><a href="https://blog.51cto.com/lexsaints/5094214">Bat 去掉变量字符串中的空格</a>.<br><a href="https://blog.csdn.net/x_iya/article/details/51794178">批处理将字符串输出到Windows剪贴板</a>.</p><h2 id="2-bat实现git自动提交"><a href="#2-bat实现git自动提交" class="headerlink" title="2. bat实现git自动提交"></a>2. bat实现git自动提交</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> D:\Blog_my\blog_img\blogImg</span><br><span class="line"></span><br><span class="line">:: git命令</span><br><span class="line">git add . </span><br><span class="line">git commit -m &quot;更新图片&quot;</span><br><span class="line">git push </span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>相比上一个,非常简单.</p><h2 id="3-bat实现hexo三连"><a href="#3-bat实现hexo三连" class="headerlink" title="3. bat实现hexo三连"></a>3. bat实现hexo三连</h2><p>本地三连:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> D:\Blog_my\blog_hexo</span><br><span class="line"></span><br><span class="line">:: hexo三连</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><br>上传三连:<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> D:\Blog_my\blog_hexo</span><br><span class="line"></span><br><span class="line">:: hexo三连</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>一般先使用<code>按日期新建文件夹.bat</code>创建文件夹 和 生成新文件名.<br>博客编写完后,使用<code>本地三连.bat</code>检查博客,然后使用<code>上传三连.bat</code>实现博客上传.<br>最后使用<code>blog自动提交脚本.bat</code>实现git上传到github中.</p><h2 id="5-改进1-bat文件集中"><a href="#5-改进1-bat文件集中" class="headerlink" title="5. 改进1: bat文件集中"></a>5. 改进1: bat文件集中</h2><p>由于不同的bat文件在不同的文件夹下,为了更加方便的使用bat命令,我将它们都放入同一文件夹下了.</p><p>因此,<u>bat文件需要加上切换目录命令!</u><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:: 切换目录</span><br><span class="line">cd /d D:\Blog_my\blog_img\blogImg</span><br></pre></td></tr></table></figure></p><p>改进效果:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230125/20230125_12.jpg" alt="未加载图片" style="zoom:80%;" /></p><h2 id="6-改进2-添加默认值"><a href="#6-改进2-添加默认值" class="headerlink" title="6. 改进2: 添加默认值"></a>6. 改进2: 添加默认值</h2><p>上传图片默认commit为”更新图片”.<br>其他情况输入为准.</p><p>代码:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set /p var=输入描述:</span><br><span class="line"></span><br><span class="line">if &quot;%var%&quot;==&quot;&quot; set var=更新图片</span><br><span class="line">echo %var%</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解相关(供学习使用)</title>
      <link href="/2023/01/14/%E7%A0%B4%E8%A7%A3%E7%9B%B8%E5%85%B3-%E4%BE%9B%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/14/%E7%A0%B4%E8%A7%A3%E7%9B%B8%E5%85%B3-%E4%BE%9B%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>该方法来自于公众号 <span class='p red'>终码一生</span> .<br>该公众号提供 临时激活码 , 半永久激活码 以及正版授权 .</p></div><h2 id="pycharm破解过程"><a href="#pycharm破解过程" class="headerlink" title="pycharm破解过程"></a>pycharm破解过程</h2><p>在公众号中下载对应文件 <mark>jihuo-tool-2022.3.zip</mark>.</p><p>按照教程执行对应文件.(在scipts文件夹下)</p><p>激活成功结果:<br><img src="https://cdn.staticaly.com/gh/qvq-ovo/blogImg/main/img/20230114/1.jpg" title="截图展示" alt="未加载成功" style="zoom:80%;" /></p><p>虽然没有到永远,至少能一两年安心使用.</p><h2 id="idea破解过程"><a href="#idea破解过程" class="headerlink" title="idea破解过程"></a>idea破解过程</h2><p>链接: <a href="http://www.itzoo.net/idea/intellij-idea2021-3-latest-version-login-free-crack-patch-permanent-crack-free-tutorial-filter-agent.html">IntelliJ IDEA2021.3 最新版本 免登陆破解补丁 永久破解 免费教程</a>.<br>目前来看,网上最好的.</p><p><strong>1:</strong> 先进入idea<br>使用免费激活码: <a href="http://idea.94goo.com">http://idea.94goo.com</a></p><p><strong>2:</strong> 添加补丁文件<br>打开菜单栏Help -&gt; Edit Custom VM Options…,<br>开始添加附件中下载的filter-agent.jar.</p><p>网页提供的备用方案: <a href="http://blog.idejihuo.com/jetbrains/how-do-i-add-agent-configuration-if-the-activation-code-is-invalid.html">另一种添加补丁的方式</a></p><p>网站关联的公众号是: 终码一生.<br>idea版本是2021.2.1</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python打包</title>
      <link href="/2023/01/14/%E8%87%AA%E5%8A%A8%E5%8C%96/python%E6%89%93%E5%8C%85/"/>
      <url>/2023/01/14/%E8%87%AA%E5%8A%A8%E5%8C%96/python%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>先跟着b站<a href="">视频</a>学习相关知识.</p></div><h2 id="1-exe打包"><a href="#1-exe打包" class="headerlink" title="1. exe打包"></a>1. exe打包</h2><h3 id="1-1-安装第三方库-Pyinstaller"><a href="#1-1-安装第三方库-Pyinstaller" class="headerlink" title="1.1 安装第三方库 Pyinstaller"></a>1.1 安装第三方库 Pyinstaller</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip/conda install pytinstaller</span><br></pre></td></tr></table></figure><p>注意事项:</p><ul><li>不可跨平台,但支持mac win</li><li>在虚拟环境下打包(避开不必要的三方库)</li></ul><h3 id="1-2-打包成多文件"><a href="#1-2-打包成多文件" class="headerlink" title="1.2 打包成多文件"></a>1.2 打包成多文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -D py文件</span><br></pre></td></tr></table></figure><p>生成的<code>dist</code>目录下是我们需要的东西.至于<code>*.spec</code>,<code>build</code>文件夹 都是过程产物.<br>dist下.exe文件是我们所需要的</p>]]></content>
      
      
      <categories>
          
          <category> 打包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring5-day2</title>
      <link href="/2023/01/13/SSM%E5%AD%A6%E4%B9%A0/spring5-day2/"/>
      <url>/2023/01/13/SSM%E5%AD%A6%E4%B9%A0/spring5-day2/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>学习以下知识点:</p><ul><li>set注入</li><li>单例模式(singleton),原型模式(prototype)</li><li>自动装配</li><li>通过<code>@Autowired</code>注释实现自动装配</li></ul></div><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1.构造器注入"></a>1.构造器注入</h4><p>前面已经说过了(默认无参,有参有三种方式)</p><h4 id="2-set注入-重点"><a href="#2-set注入-重点" class="headerlink" title="2.set注入[重点]"></a>2.set注入[<font color=#FF0000>重点</font>]</h4><ul><li>依赖: Bean对象的创建依赖于容器</li><li>注入: Bean对象中的所有属性,是由容器来注入的.</li></ul><p>环境:<br>复杂类型Student<br>路径:<code>/spring-study/spring-04-di</code><br>Student的相关属性:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复杂的属性</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Address address;</span><br><span class="line"><span class="keyword">private</span> String[] books;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line"><span class="keyword">private</span> Properties info;<span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">private</span> String wife; <span class="comment">//用于null赋值</span></span><br></pre></td></tr></table></figure><br>::: warning<br><strong>提示</strong><br>这些属性都要写对应的get,set方法<br>(没有set方法怎么set注入啊)<br>:::</p><p>不同类型对应的set注入代码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--普通值注入: value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Bean注入: ref--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 看了下面的就知道,上面的这两个算是简写了注入方式 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数组注入: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jojo<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List注入: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Map注入: --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map的注入和上面两个又不同哦--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;124124&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;124125124&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Set注入: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>WeGame<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>QQ<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--特殊值注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--空值注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--特殊类型:Properties的注入: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>2352512421<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;生日&quot;</span>&gt;</span>2001-13-2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男性<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><br>很显然:</p><ul><li>==value注入和ref注入最常见==,所有就有简写方式.</li><li>List,Array,Set都是内部存一类值的,注入方式都相同</li><li>Map,Properties这两种==最特别==,所以注入的方式也不同(注:这两种相互之间也不同)</li><li>null值注入比较特殊哦,有一个专门的标签.</li></ul><p>这些注入方式都可以在官网找到相同的:<br><img src="/spring5-day2/1.jpg" alt="官网部分截图"></p><h4 id="p命名和c命名空间注入-扩展方式注入"><a href="#p命名和c命名空间注入-扩展方式注入" class="headerlink" title="p命名和c命名空间注入(扩展方式注入)"></a>p命名和c命名空间注入(扩展方式注入)</h4><p>这两种命名空间注入的使用需要在前面用到的<code>beans.xml</code>中加上对应的<strong>约束语句</strong>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p命名空间 --&gt;</span></span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"><span class="comment">&lt;!-- c命名空间 --&gt;</span></span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure><br>这个是要加在头部标签<code>beans</code>中的<br>就是这样的:<br><img src="/spring5-day2/2.jpg" alt="图片"></p><p>p命名空间的用法:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--p命名空间注入, 可以直接注入属性,p: property的简写--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当然这种注入方式只能注入一些简单的东西.可以说是又偷了一波懒--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.User&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><br>c命名空间的用法:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--c命名空间注入,通过构造器注入,c:constructs--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个注入方式需要写对应的有参构造器.也算是对应的简化吧--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;19&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>::: tips<br><strong>新用法</strong><br><code>// 之前是这样强转的</code><br><code>Student student = (Student) context.getBean(&quot;student&quot;);</code></p><p><code>// 这里将要的类型传递进去了.用到了反射</code><br><code>User user = context.getBean(&quot;user&quot;,User.class);</code></p><p>:::</p><p>依赖注入就先讲到这里了.<br>看<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies">官方文档</a>就知道这里不止这点.<br><img src="/spring5-day2/3.jpg" alt="如图"></p><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><p>官网资料:<br><img src="/spring5-day2/4.jpg" alt="bean作用域"><br><strong>在这里重点掌握前两个</strong><br>后面四个一看就知道是SpringMVC中的.</p><h4 id="singleton-单例模式"><a href="#singleton-单例模式" class="headerlink" title="singleton(单例模式)"></a>singleton(单例模式)</h4><p>官网给的描述图片:<br><img src="/spring5-day2/5.jpg" alt="singleton"><br>==单例模式是默认模式==.这一点之前在<code>bean.xml</code>配置讲解中就提过一次了.<br>xml配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;..&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="prototype-原型模式"><a href="#prototype-原型模式" class="headerlink" title="prototype(原型模式)"></a>prototype(原型模式)</h4><p>说白了就是==每次从容器中get时都会生成一个新对象.==<br>这一点和单例模式是相对的.<br>官网给的描述图片:<br><img src="/spring5-day2/6.jpg" alt="Prototype"></p><p>xml配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;..&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="其余的几个模式-request-session-application"><a href="#其余的几个模式-request-session-application" class="headerlink" title="其余的几个模式:request,session,application"></a>其余的几个模式:request,session,application</h4><p>这些只能在web开发中用到.<br>所以这里就不展示了.</p><h3 id="自动装配Bean"><a href="#自动装配Bean" class="headerlink" title="自动装配Bean"></a>自动装配Bean</h3><p><strong>自动装配是Spring满足bean依赖的一种方式</strong><br>Spring中有==三种装配的方式==:</p><ol><li>在<code>xml</code>中显式配置(前面一直用的)</li><li>在<code>java</code>中显式配置</li><li>隐式的自动装配bean[<font color=#FF0000>重点</font>]</li></ol><p>自动装配的路径:<code>/spring-study/spring-05-autowired</code></p><p>先配置好环境(和之前的一模一样)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Dog&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.People&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="自动装配的两种方式"><a href="#自动装配的两种方式" class="headerlink" title="==自动装配的两种方式=="></a>==自动装配的两种方式==</h4><p><strong>byName</strong>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动装配byName: 会自动在容器上下文中找和自己对象set方法后面值对应的bean id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><br>byName就是根据bean的id来找的.<br>所以要保证所有的id唯一,并且这个bean需要和自动注入的属性的set方法的值一致.</p><p><strong>byType</strong>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><br>byType就是根据对象属性类型相同的进行匹配.<br>如果相同Type有多个就会报错,所以要保证类型全局唯一,并且这个bean需要和自动注入的属性的类型一致.<br>不过byType可以省略id自动装配.(byName就不行)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Cat&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Dog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="使用注解实现自动装配"><a href="#使用注解实现自动装配" class="headerlink" title="使用注解实现自动装配"></a>使用注解实现自动装配</h4><p>是不是觉得上面两种方式还是有点麻烦.QvQ<br>现在在进行进一步简化.<br><em>Spring从2.5就支持注解了.</em><br>::: tips<br><strong>使用注解须知:</strong></p><ol><li>导入约束 contest约束<br><code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></li><li>配置注解的支持<br><code>&lt;context:annotation-config/&gt;</code><br>:::<br>官网给出的xml:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>==和前面的xml还是有点差别的.==<br>在idea中可以在原先的基础上写上<code>&lt;context:annotation-config/&gt;</code>,idea会自动导入约束.</li></ol><p>路径:<code>/spring-study/spring-05-autowired</code><br>这里是直接修改前面的xml.</p><p>现在呢,在<code>beans.xml</code>的配置就非常的简洁了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Cat&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Dog&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.People&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><br>然后在<code>people.class</code>中添加注释<code>@Autowired</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>==这里的<code>@Autowired</code>是先通过Type注入,后通过Name注入==</p><p>这个<code>@Autowired</code>非常的nice.内部是通过反射实现的.所以在<code>people</code>类中甚至<code>cat,dog</code>对应的set方法都可以省略掉.但是 <strong>官方推荐要有set方法</strong></p><h5 id="注释-Autowired的用法总结"><a href="#注释-Autowired的用法总结" class="headerlink" title="注释@Autowired的用法总结"></a>注释<code>@Autowired</code>的用法总结</h5><pre><code>直接在属性上使用即可,也支持在对应的set方法上使用使用@Autowired后可以不编写set方法,但官方推荐写上</code></pre><p><strong><code>@Autowired</code>先通过ByType进行装配,不成功再进行ByName装配</strong></p><p>==科普:==<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Nullable 这个注解标记的字段可以为null</span><br><span class="line">这个注解好像只是为了绕过编译器.在运行过程中没有任何用处</span><br></pre></td></tr></table></figure><br>而在<code>@Autowired</code>源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果我们显式的定义<code>@Autowired</code>成这个样子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure><br><strong>这样做即使是<code>@Autowired</code>找不到注入的对象也不会抛出异常</strong></p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring5-day1</title>
      <link href="/2023/01/12/SSM%E5%AD%A6%E4%B9%A0/spring5-day1/"/>
      <url>/2023/01/12/SSM%E5%AD%A6%E4%B9%A0/spring5-day1/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p><strong>开新坑了~</strong>.<br>跟着狂神学习spring5<br><a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=1">狂神b站视频</a></p></div><h2 id="1-spring5"><a href="#1-spring5" class="headerlink" title="1.spring5"></a>1.spring5</h2><h3 id="1-1-IOC理论推导"><a href="#1-1-IOC理论推导" class="headerlink" title="1.1 IOC理论推导"></a>1.1 IOC理论推导</h3><p>路径:<code>spring-study/spring-01-ioc1</code></p><p>在UserServiceImpl中,我们是直接写死了这句话<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br></pre></td></tr></table></figure><br>很显然,如果用户需求改变了,我们就要回到这里修改这句话.</p><p>现在我们多写了一个set方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用set来实现动态值注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>这样在用户层面就可以自己动态选择自己想要的接口.</p><p><strong>这点转变,就是IOC的思想的体现.</strong><br><mark>这种思想,本质上解决了问题,程序员不用再去管理对象的创建了.</mark><br>系统的耦合性大大降低,人员可以更加专注在业务的实现了.</p><p>::: warning<br><strong>提示</strong><br>注意:上面的例子只是用来说明IOC思想.<br>:::</p><p>思想图示:<br><img src="/spring5-day1/1.png" alt="IOC"></p><p>总结:<br>    控制反转是一种通过描述(XMIL或注解)并通过第三方去生产或获取特定对象的方式.<br>    在Spring中实现控制反转的是IoC容器,其实现方式是依赖注入(DI).</p><h3 id="1-2-HelloSpring编写"><a href="#1-2-HelloSpring编写" class="headerlink" title="1.2 HelloSpring编写"></a>1.2 HelloSpring编写</h3><p>路径:<code>spring-study/spring-02-hellospring</code></p><h4 id="1-2-1先编写一个简单的pojo类"><a href="#1-2-1先编写一个简单的pojo类" class="headerlink" title="1.2.1先编写一个简单的pojo类:"></a>1.2.1先编写一个简单的pojo类:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.li.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> IH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/5/10 21:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-配置spring相关的元数据"><a href="#1-2-2-配置spring相关的元数据" class="headerlink" title="1.2.2 配置spring相关的元数据"></a>1.2.2 配置spring相关的元数据</h4><p>在resources下新建一个<code>beans.xml</code><br>在<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-metadata">官网</a>上拷贝以下内容进去<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><br>==平时的时候可以直接这样创建:==<br><img src="/spring5-day1/2.jpg" alt="spring的xml"></p><h4 id="3-修改beans-xml"><a href="#3-修改beans-xml" class="headerlink" title="3.修改beans.xml"></a>3.修改<code>beans.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用Spring来创建对象,在Spring中,这些都被称为Bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-编写对应的用户代码"><a href="#4-编写对应的用户代码" class="headerlink" title="4.编写对应的用户代码"></a>4.编写对应的用户代码</h4><p>官网提供了spring对应的实例化容器的代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br></pre></td></tr></table></figure><br>很显然这里我们没有这两个文件<code>&quot;services.xml&quot;, &quot;daos.xml&quot;</code>.所以替换成<code>beans.xml</code>就可以了.<br>这句话的意义: 获取spring的上下文对象.<br>有什么用呢:如果我们要去使用beans中的对象,直接从<code>context</code>中取出来就可以了.<br>就像这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello)context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">hello.toString();</span><br></pre></td></tr></table></figure><br>这里就很明显可以看出<strong>控制反转</strong>的过程:</p><pre><code>hello对象是由Spring创建-&gt;看beans.xml中的bean标签就知道hello对象的属性也是由Spring容器设置的-&gt;bean标签下的property.</code></pre><blockquote><p>==提示:==<br>property中不仅可以用 value来指定<strong>基本数据类型</strong><br>还可以通过ref来引用Spring容器中创建好的<strong>对象</strong></p></blockquote><p>在视频5中,还将spring-01-ioc1修改成spring了.</p><p><strong>理解</strong>:</p><pre><code>我们彻底不用去程序中修改代码,要实现不同的操作,只需要在xml配置信息中进行修改.所谓的IoC:一句话: 对象由Spring来创建,管理,装配!</code></pre><h3 id="Spring-Bean参数的三种注入方式"><a href="#Spring-Bean参数的三种注入方式" class="headerlink" title="Spring Bean参数的三种注入方式"></a>Spring Bean参数的三种注入方式</h3><p>路径:<code>spring-study/spring-03-ioc2</code></p><p><strong>默认</strong>为==使用无参构造创建对象==.</p><p>如果要想使用有参构造呢?<br>官网提供了三种方式:</p><ol><li><p>通过参数下标赋值的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:这里的下标是从<strong>0开始的</strong>.</p></li><li><p>通过参数的类型进行赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:<br>a.基本类型可以直接写,像String这样的==引用类型就要用全限定名==.<br>b.如果类型相同,就按照顺序来赋值.  </p></li><li><p>直接通过参数名(用的最爽)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>==另一个知识点:==<br>所有在<code>beans.xml</code>中注册过的对象.<br>在代码执行到<code>new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code>时,都<strong>在容器中创建了一份,且仅一份</strong>.</p><h3 id="Spring-bean-xml的配置"><a href="#Spring-bean-xml的配置" class="headerlink" title="Spring bean.xml的配置"></a>Spring bean.xml的配置</h3><p>路径:<code>spring-study/spring-03-ioc2</code></p><h4 id="1-别名-alias"><a href="#1-别名-alias" class="headerlink" title="1.别名(alias)"></a>1.别名(alias)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>添加了别名,就也可以通过别名来获取这个对象.<br>一对一的</p><h4 id="2-Bean的配置"><a href="#2-Bean的配置" class="headerlink" title="2.Bean的配置"></a>2.Bean的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id: bean 的唯一标识符. 相当于我们学的对象名</span></span><br><span class="line"><span class="comment">class: bean 对象所对应的全限定名</span></span><br><span class="line"><span class="comment">name: 也是别名,而且可以取多个别名,而且可以用很多种分割符号(完虐alias)</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.li.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2 u3,s3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李辉&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-import-团队"><a href="#3-import-团队" class="headerlink" title="3.import(团队)"></a>3.import(团队)</h4><p>import用于<strong>团队开发</strong>.它可以将多个配置文件,导入合并成为一个总配置.</p><p>这个就不演示了.</p><p>配置讲完了,很显然这只是表象,不然Spring也就不配称为”配置炼狱”.</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记布局要求</title>
      <link href="/2023/01/12/%E7%AC%94%E8%AE%B0%E5%B8%83%E5%B1%80%E8%A6%81%E6%B1%82/"/>
      <url>/2023/01/12/%E7%AC%94%E8%AE%B0%E5%B8%83%E5%B1%80%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>记录各种笔记的格式要求.<br>一般追求简单,实用.<br>写在这是为了防止忘记.</p></div><div class="note warning flat"><p>本文用于记录个人笔记习惯,仅供参考.</p></div><h4 id="1-1-OneNote格式要求"><a href="#1-1-OneNote格式要求" class="headerlink" title="1.1 OneNote格式要求"></a>1.1 OneNote格式要求</h4><ol><li>页面大标题 华文中宋 28</li><li>分块大标题 华文中宋 24</li><li>分块小标题 黑体 16,18左右</li><li>正文 黑体 14</li></ol><p>常用标记有 <mark>高亮文字</mark> <u>下划线</u> <strong>加重</strong> 三种.<br>中文和英文之间加空格<br><div class="note blue no-icon flat"><p>为了整体美观,某些正文也会加到16,18左右.</p></div></p>]]></content>
      
      
      <categories>
          
          <category> 习惯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化(一)</title>
      <link href="/2023/01/11/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96-%E4%B8%80/"/>
      <url>/2023/01/11/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><font size=4><b>前言📝</b></font><p>完成Hexo博客的再搭建,在学习<a href="https://www.fomal.cc/">Fomalhaut🥝</a>大神视频后成功魔改自己的博客首页.</p></div><h2 id="1-美化进度报告"><a href="#1-美化进度报告" class="headerlink" title="1.美化进度报告"></a>1.美化进度报告</h2><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>文章置顶滚动栏(店长)</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>外挂标签的引入（店长）</p>            </div><p>有了外挂标签,支持非常多的文章样式</p><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>按键防抖</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>Vue + Element样式弹窗</p>            </div><p>配合按键防抖=&gt; 不同按键出现不同反应(复制弹窗)</p><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>配置手机PC页面白天黑夜共四个背景图(店长)</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>PDF 插件安装</p>            </div><p>我这需要将 ejs 升级到 2.5.5以上</p><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>宽屏适配</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>文章三栏(需要微调)</p>            </div><p>使用文章三栏不可使用 文章双侧栏显示(小冰) </p><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>右边按钮阅读进度（Leonus）</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>直达底部按钮</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>文章页顶部波浪线</p>            </div><p>完成了,还未微调 css 中<code>fill</code>属性.感觉有点突兀</p><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>白天雪花特效</p>            </div><p>个人感觉要去找更钟意的下落特效</p><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>导航栏魔改增强版(LYX)</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>页面样式调节</p>            </div><p>页面要经常调节</p><h2 id="阶段性总结一-23-1-13"><a href="#阶段性总结一-23-1-13" class="headerlink" title="阶段性总结一 23/1/13"></a>阶段性总结一 23/1/13</h2><p>页面配置在我连续两天摸着大佬<a href="https://www.fomal.cc/">Fomalhaut🥝</a>文章终于算的上是看的过去了.</p><p>待解决问题:</p><ul><li>字体字号</li><li>文章置顶滚动栏(我希望是横向滚动的)</li><li>首页分类磁贴(小冰)安装</li><li>右侧功能栏 更加丰富一些</li><li>阅读模式</li><li>其他页面的配置</li></ul><p>等下次有机会再进一步修改吧!</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 页面美化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
